import{_ as s,c as n,o as a,N as o}from"./chunks/framework.5b6ea098.js";const F=JSON.parse('{"title":"5-原型与原型链","description":"","frontmatter":{},"headers":[],"relativePath":"article/web/javascript/senior/5-原型与原型链.md"}'),l={name:"article/web/javascript/senior/5-原型与原型链.md"},p=o(`<h1 id="_5-原型与原型链" tabindex="-1">5-原型与原型链 <a class="header-anchor" href="#_5-原型与原型链" aria-label="Permalink to &quot;5-原型与原型链&quot;">​</a></h1><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>首先我们来看这一段代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vvv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><ul><li>Person在这里我们称之为<code>构造函数</code>, 也是一个<code>函数对象</code></li><li>vvv 在这里我们称之为<code>实例化对象</code>,是一个<code>普通对象</code></li></ul><p>继续看下面代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// {constructor: ƒ}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">vvv</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(vvv</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__) </span><span style="color:#676E95;font-style:italic;">// {constructor: ƒ}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__) </span><span style="color:#676E95;font-style:italic;">// ƒ () { [native code] }</span></span></code></pre></div><p>由上面结果我们可以得出</p><ul><li>普通对象是没有<code>prototype</code>属性的</li><li>每个对象都会拥有<code>__proto__</code></li><li>Person.prototype === vvv._<em>proto</em>_</li><li>原型也是一个对象,就像这里的<code>{constructor: ƒ}</code></li></ul><h3 id="小结" tabindex="-1"><strong>小结</strong> <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;**小结**&quot;">​</a></h3><ul><li>构造函数可以通过<code>prototype</code>访问到原型</li><li>普通对象可以通过<code>__proto__</code>访问到原型</li><li>原型也是一个对象</li></ul><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>也是先来看一段代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Student</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">construct </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Student</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vvv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Student</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">vvv</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#676E95;font-style:italic;">// &#39;123&#39;</span></span></code></pre></div><p>上面的代码中</p><ul><li>给Prson添加了原型</li><li>将Student的原型指向了<code>Person</code>的实例化对象</li><li>vvv访问了name</li></ul><p>为什么vvv.name会是<code>123</code>呢? 明明vvv没有<code>name</code>这个属性</p><p>这是因为vvv中没有这个属性,就会往上查找</p><p>先去vvv的原型(<code>vvv.__proto__</code>)查找, 没有就会一直往上查找, 如果有这个属性就会返回, 没有返回undefined</p><p><code>vvv -&gt; vvv.__proto__ -&gt; vvv.__proto__.__proto__</code></p><p>这样的一个查找过程我们称之为<code>原型链</code></p><p><code>ps: (多个有关系的原型, 我称之为原型链)</code></p><h2 id="相关问题" tabindex="-1">相关问题 <a class="header-anchor" href="#相关问题" aria-label="Permalink to &quot;相关问题&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#676E95;font-style:italic;">// 原型链的尽头是什么 null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#676E95;font-style:italic;">// 答案是什么  Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype  </span><span style="color:#676E95;font-style:italic;">// ƒ () { [native code] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> 构造函数自身的__proto__是什么  </span><span style="color:#676E95;font-style:italic;">// Function.prototype = ƒ () { [native code] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ 答案是什么  </span><span style="color:#676E95;font-style:italic;">// Function.prototype = ƒ () { [native code] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> Object </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> Function </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__  </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div>`,24),e=[p];function t(c,r,y,i,A,C){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
