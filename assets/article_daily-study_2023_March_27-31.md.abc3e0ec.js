import{_ as a,c as s,o as l,a as n}from"./app.472a3350.js";const u=JSON.parse('{"title":"2023/3/27 -  2023/3/31","description":"","frontmatter":{},"headers":[{"level":2,"title":"2023/3/27","slug":"_2023-3-27","link":"#_2023-3-27","children":[]},{"level":2,"title":"2023/3/28","slug":"_2023-3-28","link":"#_2023-3-28","children":[]},{"level":2,"title":"2023/3/29","slug":"_2023-3-29","link":"#_2023-3-29","children":[]},{"level":2,"title":"2023/3/30","slug":"_2023-3-30","link":"#_2023-3-30","children":[]},{"level":2,"title":"2023/3/31","slug":"_2023-3-31","link":"#_2023-3-31","children":[]}],"relativePath":"article/daily-study/2023/March/27-31.md"}'),e={name:"article/daily-study/2023/March/27-31.md"},i=n(`<h1 id="_2023-3-27-2023-3-31" tabindex="-1">2023/3/27 - 2023/3/31 <a class="header-anchor" href="#_2023-3-27-2023-3-31" aria-hidden="true">#</a></h1><h2 id="_2023-3-27" tabindex="-1">2023/3/27 <a class="header-anchor" href="#_2023-3-27" aria-hidden="true">#</a></h2><ul><li>无</li></ul><h2 id="_2023-3-28" tabindex="-1">2023/3/28 <a class="header-anchor" href="#_2023-3-28" aria-hidden="true">#</a></h2><ul><li><p>写了一个实现并行限制的Promise调度器</p></li><li><p>for...in 和for...of的区别是啥？</p><ul><li>for...in用于遍历对象的可枚举属性， 而for...of只能用于遍历可迭代对象（如数组、字符串、Set、Map等）的元素</li><li>for...in遍历的顺序是不确定的，而for...of遍历的顺序是固定的</li><li>for...in可以遍历对象的原型链上的属性，而for...of只能遍历可迭代对象自身的属性</li></ul></li><li><p>script 标签中 defer 和 async 的区别</p><ul><li>defer 延迟脚本执行， 加载完不会立即执行</li><li>async 异步加载脚本， 加载完立即执行。</li></ul><p>因此，defer和async的区别在于脚本的加载和执行的时机不同。defer脚本的执行时机是在文档解析完毕后，而async脚本的执行时机是在脚本加载完毕后。如果脚本的执行顺序很重要，就应该使用defer属性；如果脚本的执行顺序不是很重要，且需要尽快加载脚本以提高页面性能，则可以使用async属性。</p></li></ul><h2 id="_2023-3-29" tabindex="-1">2023/3/29 <a class="header-anchor" href="#_2023-3-29" aria-hidden="true">#</a></h2><ul><li>无</li></ul><h2 id="_2023-3-30" tabindex="-1">2023/3/30 <a class="header-anchor" href="#_2023-3-30" aria-hidden="true">#</a></h2><ul><li>拿到父元素最后一个子元素<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">span</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">last-child</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* 操作最后一个子元素 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">span</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">nth-last-child</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* 操作倒数第二个子元素 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="_2023-3-31" tabindex="-1">2023/3/31 <a class="header-anchor" href="#_2023-3-31" aria-hidden="true">#</a></h2><ul><li>无</li></ul>`,11),r=[i];function t(o,p,c,d,h,_){return l(),s("div",null,r)}const f=a(e,[["render",t]]);export{u as __pageData,f as default};
