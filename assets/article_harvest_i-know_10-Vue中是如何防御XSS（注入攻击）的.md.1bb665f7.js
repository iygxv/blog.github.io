import{_ as s,c as a,o as n,N as l}from"./chunks/framework.5b6ea098.js";const e="/blog/assets/defense-xss.dd47a540.png",C=JSON.parse('{"title":"Vue中是如何防御XSS（注入攻击）的","description":"","frontmatter":{},"headers":[],"relativePath":"article/harvest/i-know/10-Vue中是如何防御XSS（注入攻击）的.md"}'),o={name:"article/harvest/i-know/10-Vue中是如何防御XSS（注入攻击）的.md"},p=l(`<h1 id="vue中是如何防御xss-注入攻击-的" tabindex="-1">Vue中是如何防御XSS（注入攻击）的 <a class="header-anchor" href="#vue中是如何防御xss-注入攻击-的" aria-label="Permalink to &quot;Vue中是如何防御XSS（注入攻击）的&quot;">​</a></h1><h2 id="什么是xss" tabindex="-1">什么是XSS <a class="header-anchor" href="#什么是xss" aria-label="Permalink to &quot;什么是XSS&quot;">​</a></h2><p>维基百科解释: <strong>跨站脚本</strong>（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A2%BC%E6%B3%A8%E5%85%A5" target="_blank" rel="noreferrer">代码注入</a>的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了<a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="noreferrer">HTML</a>以及用户端<a href="https://zh.wikipedia.org/wiki/%E8%85%B3%E6%9C%AC%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">脚本语言</a>。</p><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="noreferrer">详细查看</a></p><h2 id="如何代码注入攻击" tabindex="-1">如何代码注入攻击 <a class="header-anchor" href="#如何代码注入攻击" aria-label="Permalink to &quot;如何代码注入攻击&quot;">​</a></h2><p>现在模拟一段攻击文本</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> xssText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;script&gt; console.log( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">cookie数据为</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,  document.cookie ) &lt;/script&gt;</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>然后将这段文本放入html中</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cookie数据为</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookie )</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>放入之后, 这段脚本就会自动执行, 从而获取到cookie之类敏感信息。</p><p>那么如何去防御这类攻击呢？</p><ul><li>将文本内容转化为纯字符串</li><li>设置禁止通过脚本获取到cookie</li></ul><h2 id="vue中是如何防御xss-注入攻击-的-1" tabindex="-1">Vue中是如何防御XSS（注入攻击）的 <a class="header-anchor" href="#vue中是如何防御xss-注入攻击-的-1" aria-label="Permalink to &quot;Vue中是如何防御XSS（注入攻击）的&quot;">​</a></h2><p>vue主要是通过用<code>createTextNode</code>将文本、动态文本（表达式）转化为纯字符串</p><p>我们来看一段模板代码</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ xssText  }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        xssText</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;script&gt; console.log( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">cookie数据为</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,  document.cookie ) &lt;</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">script&gt;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这种操作有害吗？完全无害。为什么呢？</p><p>上面一段模板代码生成的render函数类似于</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> xxsText ) </span><span style="color:#676E95;font-style:italic;">// 创建vnode</span></span></code></pre></div><p>vue 在 patchVnode（ 虚拟dom 生成 真实dom ）有如下代码 处理子节点</p><img src="`+e+'" alt="defense-xss" style="zoom:50%;"><p>红框部分意思是 如果 vnode 子节点为 基本类型 如字符串，那么该文本会通过createTextNode方法 生成文本节点，然后插入父节点</p><p>所以 很明显 xssText 被 createTextNode 处理成了纯字符串了，变成无害的了</p><h2 id="扩展-v-html的危害" tabindex="-1">扩展：v-html的危害 <a class="header-anchor" href="#扩展-v-html的危害" aria-label="Permalink to &quot;扩展：v-html的危害&quot;">​</a></h2><p>我们知道v-html是通过innerHTML将内容直接插入到元素中</p><p>如果需要用户自己输入的避免去使用v-html去插入，因为这有可能受到xss的攻击</p><p>当然， 如果非要这样子做的话， 可以对输入的内容进行转义</p>',27),t=[p];function r(c,i,D,F,y,d){return n(),a("div",null,t)}const A=s(o,[["render",r]]);export{C as __pageData,A as default};
