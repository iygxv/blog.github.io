import{_ as s,c as a,o as n,N as o}from"./chunks/framework.7288ae32.js";const l="/blog_static/assets/image-20221022142347479.4f2d09a6.png",p="/blog_static/assets/image-20221022142725898.604293d2.png",e="/blog_static/assets/image-20221022142807588.a0bafe3b.png",t="/blog_static/assets/image-20221022142846322.ab03a7a8.png",h=JSON.parse('{"title":"Babel","description":"","frontmatter":{},"headers":[],"relativePath":"article/daily-study/2022/October/4-Babel.md"}'),r={name:"article/daily-study/2022/October/4-Babel.md"},c=o('<h1 id="babel" tabindex="-1"><strong>Babel</strong> <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;**Babel**&quot;">​</a></h1><h2 id="babel-的介绍" tabindex="-1"><strong>Babel 的介绍</strong> <a class="header-anchor" href="#babel-的介绍" aria-label="Permalink to &quot;**Babel 的介绍**&quot;">​</a></h2><p>babel 最开始叫 6to5，顾名思义是 es6 转 es5，但是后来随着 es 标准的演进，有了 es7、es8 等， 6to5 的名字已经不合适了，所以改名为了 babel。</p><p>babel 是<a href="https://link.juejin.cn/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%E5%B7%B4%E5%88%AB%E5%A1%94%2F67557%3Ffr%3Daladdin" target="_blank" rel="noreferrer">巴别塔</a>的意思，来自圣经中的典故：</p><blockquote><p>当时人类联合起来兴建希望能通往天堂的高塔，为了阻止人类的计划，上帝让人类说不同的语言，使人类相互之间不能沟通，计划因此失败，人类自此各散东西。此事件，为世上出现不同语言和种族提供解释。这座塔就是巴别塔。</p></blockquote><p><strong>Babel的用处</strong></p><ul><li>转换语法</li><li>目标环境中缺少的 Polyfill 功能（通过第三方 polyfill，例如<a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">core-js</a>）</li><li>源代码转换 (codemods)</li></ul><h2 id="babel-的编译流程" tabindex="-1"><strong>babel 的编译流程</strong> <a class="header-anchor" href="#babel-的编译流程" aria-label="Permalink to &quot;**babel 的编译流程**&quot;">​</a></h2><p>babel 是 source to source 的转换，整体编译流程分为三步：</p><ul><li>parse：通过 parser 把源码转成抽象语法树（AST）</li><li>transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改</li><li>generate：把转换后的 AST 打印成目标代码，并生成 sourcemap</li></ul><img src="'+l+'" alt="image-20221022142347479" style="zoom:100%;"><h3 id="这三步都做了什么" tabindex="-1"><strong>这三步都做了什么？</strong> <a class="header-anchor" href="#这三步都做了什么" aria-label="Permalink to &quot;**这三步都做了什么？**&quot;">​</a></h3><p><strong>parse</strong> --- parse 阶段的目的是把源码字符串转换成机器能够理解的 AST，这个过程分为词法分析、语法分析。</p><p>比如 <code>let name = &#39;guang&#39;;</code> 这样一段源码，我们要先把它分成一个个不能细分的单词（token），也就是 <code>let</code>, <code>name</code>, <code>=</code>, <code>&#39;guang&#39;</code>，这个过程是词法分析，按照单词的构成规则来拆分字符串成单词。</p><p>之后要把 token 进行递归的组装，生成 AST，这个过程是语法分析，按照不同的语法结构，来把一组单词组合成对象，比如声明语句、赋值表达式等都有对应的 AST 节点。</p><img src="'+p+'" alt="image-20221022142725898" style="zoom:50%;"><p><strong>transform</strong> --- transform 阶段是对 parse 生成的 AST 的处理，会进行 AST 的遍历，遍历的过程中处理到不同的 AST 节点会调用注册的相应的 visitor 函数，visitor 函数里可以对 AST 节点进行增删改，返回新的 AST（可以指定是否继续遍历新生成的 AST）。这样遍历完一遍 AST 之后就完成了对代码的修改。</p><img src="'+e+'" alt="image-20221022142807588" style="zoom:67%;"><p><strong>generate</strong> --- generate 阶段会把 AST 打印成目标代码字符串，并且会生成 sourcemap。不同的 AST 对应的不同结构的字符串。比如 <code>IfStatement</code> 就可以打印成 <code>if(test) {}</code> 格式的代码。这样从 AST 根节点进行递归的字符串拼接，就可以生成目标代码的字符串。</p><p><img src="'+t+`" alt="image-20221022142846322"></p><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li>parse(<code>生成ast</code>)</li><li>transform(<code>对ast进行转换</code>)</li><li>generate(<code>生成目标代码以及sourcemap</code>)</li></ul><h2 id="babel中的ast" tabindex="-1"><strong>Babel中的ast</strong> <a class="header-anchor" href="#babel中的ast" aria-label="Permalink to &quot;**Babel中的ast**&quot;">​</a></h2><p><a href="https://astexplorer.net/" target="_blank" rel="noreferrer">ast可视化查看</a></p><h2 id="sourcemap" tabindex="-1"><strong>sourcemap</strong> <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;**sourcemap**&quot;">​</a></h2><h3 id="sourcemap-的作用" tabindex="-1"><strong>sourcemap 的作用</strong> <a class="header-anchor" href="#sourcemap-的作用" aria-label="Permalink to &quot;**sourcemap 的作用**&quot;">​</a></h3><p>babel 对源码进行了修改，生成的目标代码可能改动很大，如果直接调试目标代码，那么可能很难对应到源码里。所以需要一种自动关联源码的方式，就是 sourcemap。</p><p>平时用 sourcemap 主要用两个目的：</p><p><strong>调试代码时定位到源码</strong></p><p>chrome、firefox 等浏览器支持在文件末尾加上<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FTools%2FDebugger%2FHow_to%2FUse_a_source_map" target="_blank" rel="noreferrer">一行注释</a></p><div class="language-ruby"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">//</span><span style="color:#676E95;font-style:italic;"># sourceMappingURL=http://example.com/path/to/your/sourcemap.map</span></span></code></pre></div><p>可以通过 url 的方式或者转成 base64 内联的方式来关联 sourcemap。调试工具（浏览器、vscode 等会自动解析 sourcemap，关联到源码。这样打断点、错误堆栈等都会对应到相应源码。</p><p><strong>线上报错定位到源码</strong></p><p>开发时会使用 sourcemap 来调试，但是生产可不会，要是把 sourcemap 传到生产算是大事故了。但是线上报错的时候确实也需要定位到源码，这种情况一般都是<code>单独上传 sourcemap 到错误收集平台</code>。</p><p>比如 sentry 就提供了一个 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40sentry%2Fwebpack-plugin" target="_blank" rel="noreferrer">@sentry/webpack-plugin</a> 支持在打包完成后把 sourcemap 自动上传到 sentry 后台，然后把本地 sourcemap 删掉。还提供了 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40sentry%2Fcli" target="_blank" rel="noreferrer">@sentry/cli</a> 让用户可以手动上传。</p><p>平时我们至少在这两个场景（开发时调试源码，生产时定位错误）下会用到 sourcemap。</p><h3 id="生成-sourcemap" tabindex="-1"><strong>生成 sourcemap</strong> <a class="header-anchor" href="#生成-sourcemap" aria-label="Permalink to &quot;**生成 sourcemap**&quot;">​</a></h3><p>生成 sourcemap 的流程是：</p><ol><li>创建一个 SourceMapGenerator 对象</li><li>通过 addMapping 方法添加一个映射</li><li>通过 toString 转为 sourcemap 字符串</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SourceMapGenerator</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">source-mapped.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addMapping</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">generated</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">line</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">column</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">35</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">original</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">line</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">33</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">column</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">christopher</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;{&quot;version&quot;:3,&quot;file&quot;:&quot;source-mapped.js&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   &quot;sources&quot;:[&quot;foo.js&quot;],&quot;names&quot;:[&quot;christopher&quot;],&quot;mappings&quot;:&quot;;;;;;;;;;mCAgCEA&quot;}&#39;</span></span></code></pre></div><h3 id="使用sourcemap" tabindex="-1"><strong>使用sourcemap</strong> <a class="header-anchor" href="#使用sourcemap" aria-label="Permalink to &quot;**使用sourcemap**&quot;">​</a></h3><p>SourceMapConsumer.with 的回调里面可以拿到 consumer 的 api，调用 originalPositionFor 和 generatedPositionFor 可以分别用目标代码位置查源码位置和用源码位置查目标代码位置。还可以通过 eachMapping 遍历所有 mapping，对每个进行处理。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rawSourceMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">names</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">baz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sources</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">one.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">two.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sourceRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://example.com/www/js/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mappings</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> whatever </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> SourceMapConsumer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">with</span><span style="color:#A6ACCD;">(rawSourceMap</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">consumer</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// 目标代码位置查询源码位置</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">consumer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">originalPositionFor</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    line</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    column</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">28</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// { source: &#39;http://example.com/www/js/two.js&#39;,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   line: 2,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   column: 10,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   name: &#39;n&#39; }</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 源码位置查询目标代码位置</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">consumer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">generatedPositionFor</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    source</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://example.com/www/js/two.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    line</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    column</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// { line: 2, column: 28 }</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 遍历 mapping</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">consumer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eachMapping</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">computeWhatever</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>babel 就是用这些 api 来生成 sourcemap 的。</p><h3 id="小结" tabindex="-1"><strong>小结</strong> <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;**小结**&quot;">​</a></h3><ul><li>sourcemap作用? 1. 开发调式 2. 线上排查</li><li>sourcemap做了什么？将生成的目标文件与原文件进行映射 (<code>文件位置、代码行和列</code>)</li></ul><p><a href="https://juejin.cn/book/6946117847848321055/section/6947678220401508392" target="_blank" rel="noreferrer">sourceMap奥秘</a></p><h2 id="参考链接" tabindex="-1"><strong>参考链接</strong> <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;**参考链接**&quot;">​</a></h2><p><a href="https://juejin.cn/book/6946117847848321055" target="_blank" rel="noreferrer">Babel 插件通关秘籍</a></p>`,49),F=[c];function y(D,i,A,C,u,m){return n(),a("div",null,F)}const d=s(r,[["render",y]]);export{h as __pageData,d as default};
