import{_ as s,c as a,o as n,a as l}from"./app.f9ecb9d2.js";const A=JSON.parse('{"title":"8.21-总结本周实现","description":"","frontmatter":{},"headers":[{"level":2,"title":"交换a,b的值，不使用临时变量","slug":"交换a-b的值-不使用临时变量","link":"#交换a-b的值-不使用临时变量","children":[]},{"level":2,"title":"实现数组的乱序输出","slug":"实现数组的乱序输出","link":"#实现数组的乱序输出","children":[]},{"level":2,"title":"实现对象扁平化","slug":"实现对象扁平化","link":"#实现对象扁平化","children":[]},{"level":2,"title":"实现JSON.stringify","slug":"实现json-stringify","link":"#实现json-stringify","children":[]}],"relativePath":"article/daily-study/2022/august/8.21-总结本周实现.md"}'),p={name:"article/daily-study/2022/august/8.21-总结本周实现.md"},o=l(`<h1 id="_8-21-总结本周实现" tabindex="-1">8.21-总结本周实现 <a class="header-anchor" href="#_8-21-总结本周实现" aria-hidden="true">#</a></h1><h2 id="交换a-b的值-不使用临时变量" tabindex="-1">交换a,b的值，不使用临时变量 <a class="header-anchor" href="#交换a-b的值-不使用临时变量" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// 1 + 2 = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// 3 - 2 = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// 3 - 1 = 2</span></span>
<span class="line"></span></code></pre></div><p>巧妙的利用了加减法去实现了在不使用临时变量的情况下进行了交换</p><p>如果在数组的情况中,例如:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 交换1和3的位置 =&gt; [3, 2, 1]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 我们可以使用解构的方式去实现</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">[arr[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 此时我们在打印arr =&gt; [3, 2, 1]</span></span>
<span class="line"></span></code></pre></div><p>当然如果可以使用临时变量,也是很容易的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> temp</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 此时我们在打印arr =&gt; [3, 2, 1]</span></span>
<span class="line"></span></code></pre></div><h2 id="实现数组的乱序输出" tabindex="-1">实现数组的乱序输出 <a class="header-anchor" href="#实现数组的乱序输出" aria-hidden="true">#</a></h2><p>数组的乱序输出也叫做<code>洗牌算法</code>, 相比较与<code>Math.random() - 0.5</code>这中乱序方法好很多</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>这种方法如果在元素少的情况下可以使用, 但是数据量大的情况会出现极为不稳定的乱序</p><p><code>洗牌算法的原理</code></p><ul><li>遍历数组元素</li><li>然后将当前<code>(i - 1)</code>元素与以后随机位置的元素进行交换</li></ul><h2 id="实现对象扁平化" tabindex="-1">实现对象扁平化 <a class="header-anchor" href="#实现对象扁平化" aria-hidden="true">#</a></h2><p>对象扁平化相比较与数据的扁平化难度大了挺多</p><p><code>对象扁平化实现的原理</code></p><ul><li>遍历每一层的targe</li><li>先判断初始化情况还是非初始化的情况</li><li>然后判断数组与对象的各自情况</li><li>这里使用到了递归, 需要注意到什么时候应该递归,什么时候是递归的出口</li></ul><h2 id="实现json-stringify" tabindex="-1">实现JSON.stringify <a class="header-anchor" href="#实现json-stringify" aria-hidden="true">#</a></h2><p>实现JSON.stringify算是一个综合的一个挑战了, 有着各种的类型判断, 还有很多细节的一个处理, 需要对每一种情况都了解于心</p><p>在实现之前我们应该要明白他的实现核心<a href="https://codevity.top/article/every-insist/august/8.18-%E5%AE%9E%E7%8E%B0JSON.stringify.html#_9%E5%A4%A7%E7%89%B9%E6%80%A7" target="_blank" rel="noreferrer">九大特性</a></p><p>然后我们在这里还实现了<code>判断对象是否有循环引用</code>,这个我觉得也是一个比较重要的知识点了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 判断对象是否有循环引用</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> isCyclic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakSet</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isLoop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 表示没有循环引用</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dfs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 不是对象类型的,直接跳过</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 存在循环引用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">isLoop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 存入进hash里面</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 对obj下的属性进行挨个检测</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 平级检测完成之后，将当前对象删除，防止误判</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      例如：对象的属性指向同一引用，如果不删除的话，会被认为是循环引用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      let tempObj = {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        name: &#39;vvv&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      let obj4 = {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        obj1: tempObj,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        obj2: tempObj</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delete</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isLoop</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,23),e=[o];function t(c,r,y,i,F,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
