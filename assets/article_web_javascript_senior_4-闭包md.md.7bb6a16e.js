import{_ as s,c as n,o as l,a}from"./app.f58bd366.js";const A=JSON.parse('{"title":"4-闭包","description":"","frontmatter":{},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"用途","slug":"用途","link":"#用途","children":[]},{"level":2,"title":"答题","slug":"答题","link":"#答题","children":[]},{"level":2,"title":"总结复盘","slug":"总结复盘","link":"#总结复盘","children":[]},{"level":2,"title":"原文链接","slug":"原文链接","link":"#原文链接","children":[]}],"relativePath":"article/web/javascript/senior/4-闭包md.md"}'),p={name:"article/web/javascript/senior/4-闭包md.md"},o=a(`<h1 id="_4-闭包" tabindex="-1">4-闭包 <a class="header-anchor" href="#_4-闭包" aria-hidden="true">#</a></h1><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-hidden="true">#</a></h2><ul><li><p>红宝书：<strong>闭包是指有权访问另一个函数作用域中变量的函数</strong></p></li><li><p>MDN：<strong>闭包是指那些能够访问自由变量的函数，这里的自由变量是指外部作用域中的变量</strong></p><p><code>涉及到哪些知识点?</code></p><ul><li>作用域 <ul><li>全局作用域</li><li>局部作用域（函数作用域）</li><li>词法作用域 (作用域链)</li><li>执行上下文</li></ul></li></ul></li></ul><h2 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-hidden="true">#</a></h2><ul><li>优点：私有化数据，在私有化数据的基础上保持数据 <ul><li>红宝书：任何在函数中定义的变量，都可以认为是私有变量 举个例子：防抖：</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 手写题也是一样，不要上来就写，先把注释写好，写出自己的思路见解，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  有些时候写不出来，有自己的思路也是面试官比较看重的点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 概念</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 思路</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 编码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounce</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">delay</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 私有化数据</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 下一次点击的时候获取到上一下的time，也就是保持数据。</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#676E95;font-style:italic;">// 思考题 这里要不要清空time</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#676E95;font-style:italic;">// time = null;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">delay</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>缺点：可能会导致内存泄漏，内部的变量不会被自动回收掉 <ul><li>垃圾回收机制 <ul><li>标记清除</li><li>引用计数</li><li>新生代，老生代</li></ul></li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 手写题也是一样，不要上来就写，先把注释写好，写出自己的思路见解，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   有些时候写不出来，有自己的思路也是面试官比较看重的点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 概念</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 思路</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 编码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">assignHandler</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// element = null  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上代码创建了一个作为element元素事件处理程序的闭包，而这个闭包又创建了一个循环引用。由于匿名函数保存了一个对assignHandler() 的活动对象的引用，因此就会导致无法减少element的引用数，只要匿名函数存在，element 的引用数至少也是1，因此会占用内存久永远不会被回收</p><p><strong>上面的例子和解析，都是红宝书的原题，我手抄下来的，大家一定要多看书，书上讲的很清晰易懂！</strong></p><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-hidden="true">#</a></h2><ul><li>防抖，节流 ......</li><li>vue ：响应式原理</li><li>react ：fiber,hooks原理</li></ul><h2 id="答题" tabindex="-1">答题 <a class="header-anchor" href="#答题" aria-hidden="true">#</a></h2><p><strong>闭包是指有权访问另一个函数作用域中变量的函数，优点是私有化数据，在私有化数据的基础上保持数据，缺点使用不恰当会导致内存泄漏，在不需要用到的时候及时把变量置为null</strong></p><p><strong>闭包的应用是非常广泛的，比方我们常见的节流，防抖，函数柯理化，在vue,react源码中也应用广泛</strong>（<code>如果你们接的住vue,react源码中，具体的应用场景你就可以答</code>）</p><h2 id="总结复盘" tabindex="-1">总结复盘 <a class="header-anchor" href="#总结复盘" aria-hidden="true">#</a></h2><p>一道题的背后往往涉及到非常多的知识，就像套娃一样，你想一想你能不能接住面试官的三连问？就像闭包设计到了</p><ul><li>作用域&amp;作用域链</li><li>执行上下文 --》这里又会衍生到this相关的问题和手写代码题</li><li>缓存，内存</li><li>垃圾回收机制</li><li>以及对知识广度的探索，比方你举例的应用场景够不够有说服力</li></ul><p>我们学习的记忆曲线是随着时间的流逝而慢慢流逝，你搞一遍，肯定会忘掉的，<strong>你要能一遍记住，你肯定不会在看我这篇文章，你是神！</strong></p><p>所以我要要学会总结复盘，写文章记录，或者形成自己的脑图，没事的时候拿出来看看，对吧，<strong>不断的重复记忆，慢慢的你就变强了！</strong></p><h2 id="原文链接" tabindex="-1">原文链接 <a class="header-anchor" href="#原文链接" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/7088216038063472670" target="_blank" rel="noreferrer">闭包</a></p>`,22),e=[o];function t(c,r,i,y,F,D){return l(),n("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
