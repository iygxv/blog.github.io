import{_ as e,c as o,o as a,N as l}from"./chunks/framework.5b6ea098.js";const b=JSON.parse('{"title":"深入类型判断转换(下)","description":"","frontmatter":{},"headers":[],"relativePath":"article/web/javascript/base/8-深入类型转换(下).md"}'),s={name:"article/web/javascript/base/8-深入类型转换(下).md"},n=l(`<h1 id="深入类型判断转换-下" tabindex="-1">深入类型判断转换(下) <a class="header-anchor" href="#深入类型判断转换-下" aria-label="Permalink to &quot;深入类型判断转换(下)&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>举个例子：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(1 + &#39;1&#39;)</span></span></code></pre></div><p>在 JavaScript 中，这是完全可以运行的，不过你有没有好奇，为什么 1 和 &#39;1&#39; 分属不同的数据类型，为什么就可以进行运算呢？</p><p>这其实是因为 JavaScript 自动的将数据类型进行了转换，我们通常称为隐式类型转换。但是我们都知道，<code>+</code>运算符既可以用于数字加法，也能用于字符串拼接，那在这个例子中，是将数字 <code>1</code> 转成字符串 <code>&#39;1&#39;</code>，进行拼接运算？还是将字符串 <code>&#39;1&#39;</code> 转成数字 <code>1</code>，进行加法运算呢？</p><p>先卖个关子，虽然估计你也知道答案。今天，我们就常见的隐式类型转化的场景进行介绍。</p><h2 id="一元操作符" tabindex="-1">一元操作符 + <a class="header-anchor" href="#一元操作符" aria-label="Permalink to &quot;一元操作符 +&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(+&#39;1&#39;);</span></span></code></pre></div><p>当 + 运算符作为一元操作符的时候，查看 <a href="http://es5.github.io/#x11.4.6" target="_blank" rel="noreferrer">ES5规范1.4.6</a>，会调用 <code>ToNumber</code> 处理该值，相当于 <code>Number(&#39;1&#39;)</code>，最终结果返回数字 <code>1</code>。</p><p>那么下面的这些结果呢？</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(+[]);</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(+[&#39;1&#39;]);</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(+[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]);</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(+{});</span></span></code></pre></div><p>既然是调用 <code>ToNumber</code> 方法，回想<a href="https://github.com/mqyqingfeng/Blog/issues/159" target="_blank" rel="noreferrer">《JavaScript 深入之头疼的类型转换(上)》</a>中的内容，当输入的值是对象的时候，先调用 <code>ToPrimitive(input, Number)</code> 方法，执行的步骤是：</p><ol><li>如果 <code>obj</code> 为基本类型，直接返回</li><li>否则，调用 <code>valueOf</code> 方法，如果返回一个原始值，则 <code>JavaScript</code> 将其返回。</li><li>否则，调用 <code>toString</code> 方法，如果返回一个原始值，则<code>JavaScript</code> 将其返回。</li><li>否则，<code>JavaScript</code> 抛出一个类型错误异常。</li></ol><p>以 <code>+[]</code> 为例，<code>[]</code> 调用 <code>valueOf</code> 方法，返回一个空数组，因为不是原始值，调用 <code>toString</code> 方法，返回 <code>&quot;&quot;</code>。</p><p>得到返回值后，然后再调用 <code>ToNumber</code> 方法，<code>&quot;&quot;</code> 对应的返回值是 <code>0</code>，所以最终返回 <code>0</code>。</p><p>剩下的例子以此类推。结果是：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(+[&#39;1&#39;]); // 1</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(+[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]); // NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(+{}); // NaN</span></span></code></pre></div><h2 id="二元操作符" tabindex="-1">二元操作符 + <a class="header-anchor" href="#二元操作符" aria-label="Permalink to &quot;二元操作符 +&quot;">​</a></h2><h3 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h3><p>现在 <code>+</code> 运算符又变成了二元操作符，毕竟它也是加减乘除中的加号</p><p><code>1 + &#39;1&#39;</code> 我们知道答案是 &#39;11&#39;，那 <code>null + 1</code>、<code>[] + []</code>、<code>[] + {}</code>、<code>{} + {}</code> 呢？</p><p>如果要了解这些运算的结果，不可避免的我们要从规范下手。</p><p>规范地址：<a href="http://es5.github.io/#x11.6.1" target="_blank" rel="noreferrer">http://es5.github.io/#x11.6.1</a></p><p>不过这次就不直接大段大段的引用规范了，直接给大家讲简化后的内容。</p><p>到底当执行 <code>+</code> 运算的时候，会执行怎样的步骤呢？让我们根据规范<code>11.6.1</code> 来捋一捋：</p><p>当计算 value1 + value2时：</p><ol><li>lprim = ToPrimitive(value1)</li><li>rprim = ToPrimitive(value2)</li><li>如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果</li><li>返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果</li></ol><p>规范的内容就这样结束了。没有什么新的内容，<code>ToString</code>、<code>ToNumber</code>、<code>ToPrimitive</code>都是在<a href="https://github.com/mqyqingfeng/Blog/issues/159" target="_blank" rel="noreferrer">《JavaScript 深入之头疼的类型转换(上)》</a>中讲到过的内容，所以我们直接进分析阶段：</p><p>让我们来举几个例子：</p><h3 id="_1-null-与数字" tabindex="-1">1.Null 与数字 <a class="header-anchor" href="#_1-null-与数字" aria-label="Permalink to &quot;1.Null 与数字&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(null + 1);</span></span></code></pre></div><p>按照规范的步骤进行分析：</p><ol><li>lprim = ToPrimitive(null) 因为null是基本类型，直接返回，所以 lprim = null</li><li>rprim = ToPrimitive(1) 因为 1 是基本类型，直接返回，所以 rprim = null</li><li>lprim 和 rprim 都不是字符串</li><li>返回 ToNumber(null) 和 ToNumber(1) 的运算结果</li></ol><p>接下来：</p><p><code>ToNumber(null)</code> 的结果为0，(回想上篇 Number(null))，<code>ToNumber(1)</code> 的结果为 1</p><p>所以，<code>null + 1</code> 相当于 <code>0 + 1</code>，最终的结果为数字 <code>1</code>。</p><p>这个还算简单，看些稍微复杂的：</p><h3 id="_2-数组与数组" tabindex="-1">2.数组与数组 <a class="header-anchor" href="#_2-数组与数组" aria-label="Permalink to &quot;2.数组与数组&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log([] + []);</span></span></code></pre></div><p>依然按照规范：</p><ol><li>lprim = ToPrimitive([])，[]是数组，相当于ToPrimitive([], Number)，先调用valueOf方法，返回对象本身，因为不是原始值，调用toString方法，返回空字符串&quot;&quot;</li><li>rprim类似。</li><li>lprim和rprim都是字符串，执行拼接操作</li></ol><p>所以，<code>[] + []</code>相当于 <code>&quot;&quot; + &quot;&quot;</code>，最终的结果是空字符串<code>&quot;&quot;</code>。</p><p>看个更复杂的：</p><h3 id="_3-数组与对象" tabindex="-1">3.数组与对象 <a class="header-anchor" href="#_3-数组与对象" aria-label="Permalink to &quot;3.数组与对象&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 两者结果一致</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log([] + {});</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log({} + []);</span></span></code></pre></div><p>按照规范：</p><ol><li>lprim = ToPrimitive([])，lprim = &quot;&quot;</li><li>rprim = ToPrimitive({})，相当于调用 ToPrimitive({}, Number)，先调用 valueOf 方法，返回对象本身，因为不是原始值，调用 toString 方法，返回 &quot;[object Object]&quot;</li><li>lprim 和 rprim 都是字符串，执行拼接操作</li></ol><p>所以，<code>[] + {}</code> 相当于 <code>&quot;&quot; + &quot;[object Object]&quot;</code>，最终的结果是 &quot;[object Object]&quot;。</p><p>下面的例子，可以按照示例类推出结果：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(1 + true);</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log({} + {});</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(new Date(2017, 04, 21) + 1) // 这个知道是数字还是字符串类型就行</span></span></code></pre></div><p>结果是：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(1 + true); // 2</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log({} + {}); // &quot;[object Object][object Object]&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(new Date(2017, 04, 21) + 1) // &quot;Sun May 21 2017 00:00:00 GMT+0800 (CST)1&quot;</span></span></code></pre></div><h2 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>以上的运算都是在 <code>console.log</code> 中进行，如果你直接在 <code>Chrome</code> 或者 <code>Firebug</code> 开发工具中的命令行直接输入，你也许会惊讶的看到一些结果的不同，比如：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/8/17157affa253a363~tplv-t2oaga2asx-image.image" alt="img"></p><p>我们刚才才说过 <code>{} + []</code> 的结果是 <code>&quot;[object Object]&quot;</code> 呐，这怎么变成了 <code>0</code> 了？</p><p>不急，我们尝试着加一个括号：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/8/17157affa615ac49~tplv-t2oaga2asx-image.image" alt="img"></p><p>结果又变成了正确的值，这是为什么呢？</p><p>其实，在不加括号的时候，<code>{}</code> 被当成了一个独立的空代码块，所以 <code>{} + []</code> 变成了 <code>+[]</code>，结果就变成了 0</p><p>同样的问题还出现在 <code>{} + {}</code> 上，而且火狐和谷歌的结果还不一样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; {} + {}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 火狐： NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">// 谷歌： &quot;[object Object][object Object]&quot;</span></span></code></pre></div><p>如果 <code>{}</code> 被当成一个独立的代码块，那么这句话相当于 <code>+{}</code>，相当于 <code>Number({})</code>，结果自然是 <code>NaN</code>，可是 <code>Chrome</code> 却在这里返回了正确的值。</p><p>那为什么这里就返回了正确的值呢？我也不知道，欢迎解答~</p><h2 id="相等" tabindex="-1">== 相等 <a class="header-anchor" href="#相等" aria-label="Permalink to &quot;\\== 相等&quot;">​</a></h2><h3 id="规范-1" tabindex="-1">规范 <a class="header-anchor" href="#规范-1" aria-label="Permalink to &quot;规范&quot;">​</a></h3><p><code>&quot;==&quot;</code> 用于比较两个值是否相等，当要比较的两个值类型不一样的时候，就会发生类型的转换。</p><p>关于使用&quot;==&quot;进行比较的时候，具体步骤可以查看<a href="http://es5.github.io/#x11.9.3" target="_blank" rel="noreferrer">规范11.9.5</a>：</p><p>当执行x == y 时：</p><ol><li><p>如果x与y是同一类型：</p><ol><li>x是Undefined，返回true</li><li>x是Null，返回true</li><li>x是数字： <ol><li>x是NaN，返回false</li><li>y是NaN，返回false</li><li>x与y相等，返回true</li><li>x是+0，y是-0，返回true</li><li>x是-0，y是+0，返回true</li><li>返回false</li></ol></li><li>x是字符串，完全相等返回true,否则返回false</li><li>x是布尔值，x和y都是true或者false，返回true，否则返回false</li><li>x和y指向同一个对象，返回true，否则返回false</li></ol></li><li><p>x是null并且y是undefined，返回true</p></li><li><p>x是undefined并且y是null，返回true</p></li><li><p>x是数字，y是字符串，判断x == ToNumber(y)</p></li><li><p>x是字符串，y是数字，判断ToNumber(x) == y</p></li><li><p>x是布尔值，判断ToNumber(x) == y</p></li><li><p>y是布尔值，判断x ==ToNumber(y)</p></li><li><p>x不是字符串或者数字，y是对象，判断x == ToPrimitive(y)</p></li><li><p>x是对象，y不是字符串或者数字，判断ToPrimitive(x) == y</p></li><li><p>返回false</p></li></ol><p>觉得看规范判断太复杂？我们来分几种情况来看：</p><h3 id="_1-null和undefined" tabindex="-1">1. null和undefined <a class="header-anchor" href="#_1-null和undefined" aria-label="Permalink to &quot;1\\. null和undefined&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(null == undefined);</span></span></code></pre></div><p>看规范第2、3步：</p><blockquote><ol start="2"><li>x是null并且y是undefined，返回true</li></ol></blockquote><blockquote><ol start="3"><li>x是undefined并且y是null，返回true</li></ol></blockquote><p>所以例子的结果自然为 <code>true</code>。</p><p>这时候，我们可以回想在<a href="https://github.com/mqyqingfeng/Blog/issues/28" target="_blank" rel="noreferrer">《JavaScript专题之类型判断(上)》</a>中见过的一段 <code>demo</code>，就是编写判断对象的类型 <code>type</code> 函数时，如果输入值是 <code>undefined</code>，就返回字符串 <code>undefined</code>，如果是 <code>null</code>，就返回字符串 <code>null</code>。</p><p>如果是你，你会怎么写呢？</p><p>下面是 jQuery 的写法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function type(obj) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (obj == null) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        return obj + &#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="_2-字符串与数字" tabindex="-1">2. 字符串与数字 <a class="header-anchor" href="#_2-字符串与数字" aria-label="Permalink to &quot;2\\. 字符串与数字&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(&#39;1&#39; == 1);</span></span></code></pre></div><p>结果肯定是true，问题在于是字符串转化成了数字和数字比较还是数字转换成了字符串和字符串比较呢？</p><p>看规范第4、5步：</p><blockquote><p>4.x是数字，y是字符串，判断x == ToNumber(y)</p></blockquote><blockquote><p>5.x是字符串，y是数字，判断ToNumber(x) == y</p></blockquote><p>结果很明显，都是转换成数字后再进行比较</p><h3 id="_3-布尔值和其他类型" tabindex="-1">3. 布尔值和其他类型 <a class="header-anchor" href="#_3-布尔值和其他类型" aria-label="Permalink to &quot;3\\. 布尔值和其他类型&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(true == &#39;2&#39;)</span></span></code></pre></div><p>当要判断的一方出现 <code>false</code> 的时候，往往最容易出错，比如上面这个例子，凭直觉应该是 <code>true</code>，毕竟 <code>Boolean(&#39;2&#39;)</code> 的结果可是true，但这道题的结果却是false。</p><p>归根到底，还是要看规范，规范第6、7步：</p><blockquote><p>6.x是布尔值，判断ToNumber(x) == y</p></blockquote><blockquote><p>7.y是布尔值，判断x ==ToNumber(y)</p></blockquote><p>当一方出现布尔值的时候，就会对这一方的值进行ToNumber处理，也就是说true会被转化成1，</p><p><code>true == &#39;2&#39;</code> 就相当于 <code>1 == &#39;2&#39;</code> 就相当于 <code>1 == 2</code>，结果自然是 <code>false</code>。</p><p>所以当一方是布尔值的时候，会对布尔值进行转换，因为这种特性，所以尽量少使用 <code>xx == true</code> 和 <code>xx == false</code> 的写法。</p><p>比如:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 不建议</span></span>
<span class="line"><span style="color:#A6ACCD;">if (a == true) {}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 建议</span></span>
<span class="line"><span style="color:#A6ACCD;">if (a) {}</span></span>
<span class="line"><span style="color:#A6ACCD;">// 更好</span></span>
<span class="line"><span style="color:#A6ACCD;">if (!!a) {}</span></span></code></pre></div><h3 id="_4-对象与非对象" tabindex="-1">4. 对象与非对象 <a class="header-anchor" href="#_4-对象与非对象" aria-label="Permalink to &quot;4\\. 对象与非对象&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log( 42 == [&#39;42&#39;])</span></span></code></pre></div><p>看规范第8、9步：</p><blockquote><ol start="8"><li>x不是字符串或者数字，y是对象，判断x == ToPrimitive(y)</li></ol></blockquote><blockquote><ol start="9"><li>x是对象，y不是字符串或者数字，判断ToPrimitive(x) == y</li></ol></blockquote><p>以这个例子为例，会使用 <code>ToPrimitive</code> 处理 <code>[&#39;42&#39;]</code>，调用<code>valueOf</code>，返回对象本身，再调用 <code>toString</code>，返回 <code>&#39;42&#39;</code>，所以</p><p><code>42 == [&#39;42&#39;]</code> 相当于 <code>42 == &#39;42&#39;</code> 相当于<code>42 == 42</code>，结果为 <code>true</code>。</p><p>到此为止，我们已经看完了第2、3、4、5、6、7、8、9步，其他的一概返回 false。</p><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>再多举几个例子进行分析：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(false == undefined)</span></span></code></pre></div><p><code>false == undefined</code> 相当于 <code>0 == undefined</code> 不符合上面的情形，执行最后一步 返回 <code>false</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(false == [])</span></span></code></pre></div><p><code>false == []</code> 相当于 <code>0 == []</code> 相当于 <code>0 == &#39;&#39;</code> 相当于 <code>0 == 0</code>，结果返回 <code>true</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log([] == ![])</span></span></code></pre></div><p>首先会执行 <code>![]</code> 操作，转换成 false，相当于 <code>[] == false</code> 相当于 <code>[] == 0</code> 相当于 <code>&#39;&#39; == 0</code> 相当于 <code>0 == 0</code>，结果返回 <code>true</code></p><p>最后再举一些会让人踩坑的例子：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(false == &quot;0&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(false == 0)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(false == &quot;&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(&quot;&quot; == 0)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(&quot;&quot; == [])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log([] == 0)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(&quot;&quot; == [null])</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(0 == &quot;\\n&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log([] == 0)</span></span></code></pre></div><p>以上均返回 true</p><h2 id="其他-1" tabindex="-1">其他 <a class="header-anchor" href="#其他-1" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>除了这两种情形之外，其实还有很多情形会发生隐式类型转换，比如<code>if</code>、<code>? :</code>、<code>&amp;&amp;</code>等情况，但相对来说，比较简单，就不再讲解。</p>`,121),c=[n];function p(t,i,d,r,u,h){return a(),o("div",null,c)}const C=e(s,[["render",p]]);export{b as __pageData,C as default};
