import{_ as s,c as a,o as l,N as o}from"./chunks/framework.7288ae32.js";const d=JSON.parse('{"title":"2023/3/1 - 2023/3/5","description":"","frontmatter":{},"headers":[],"relativePath":"article/daily-study/2023/March/1-5.md"}'),n={name:"article/daily-study/2023/March/1-5.md"},p=o(`<h1 id="_2023-3-1-2023-3-5" tabindex="-1">2023/3/1 - 2023/3/5 <a class="header-anchor" href="#_2023-3-1-2023-3-5" aria-label="Permalink to &quot;2023/3/1 - 2023/3/5&quot;">​</a></h1><h2 id="_2023-3-1" tabindex="-1">2023/3/1 <a class="header-anchor" href="#_2023-3-1" aria-label="Permalink to &quot;2023/3/1&quot;">​</a></h2><ul><li>无</li></ul><h3 id="闲暇之余" tabindex="-1">闲暇之余 <a class="header-anchor" href="#闲暇之余" aria-label="Permalink to &quot;闲暇之余&quot;">​</a></h3><ul><li><p>为什么JavaScript是单线程？</p><p><code>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM</code>。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？所以，为了避免复杂性，JavaScript就是单线程。</p><p>引入单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这同时又导致了一个问题：如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></li><li><p>事件循环</p><ul><li>进入到script标签,就进入到了第一次事件循环.</li><li>遇到同步代码，立即执行(<code>执行完同步任务后,会执行异步任务</code>)</li><li>遇到宏任务,放入到宏任务队列里.</li><li>遇到微任务,放入到微任务队列里.</li><li>执行完所有同步代码即执行栈清空(<code>步骤5</code>)</li><li>取出微任务队列代码到栈区执行</li><li>微任务代码执行完毕，本次队列清空</li><li>寻找下一个宏任务,然后重复<code>步骤5</code></li></ul><p>以此反复直到清空所有宏任务，这种不断重复的执行机制，就叫做<code>事件循环</code></p></li><li><p>Object.assign()</p><p>Object.assign()实际上对每个源对象执行的是浅复制。如果多个源对象都有相同的属性，则使 用最后一个复制的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> dest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">dest </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dest</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(dest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result) </span><span style="color:#676E95;font-style:italic;">// { id: src2, a: foo, b: bar }</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dest) </span><span style="color:#676E95;font-style:italic;">// {id: &#39;src2&#39;, a: &#39;foo&#39;, b: &#39;bar&#39;}</span></span></code></pre></div></li></ul><h2 id="_2023-3-2" tabindex="-1">2023/3/2 <a class="header-anchor" href="#_2023-3-2" aria-label="Permalink to &quot;2023/3/2&quot;">​</a></h2><ul><li>无</li></ul><h2 id="_2023-3-3" tabindex="-1">2023/3/3 <a class="header-anchor" href="#_2023-3-3" aria-label="Permalink to &quot;2023/3/3&quot;">​</a></h2><ul><li>无</li></ul><h2 id="_2023-3-4" tabindex="-1">2023/3/4 <a class="header-anchor" href="#_2023-3-4" aria-label="Permalink to &quot;2023/3/4&quot;">​</a></h2><ul><li>无</li></ul><h2 id="_2023-3-5" tabindex="-1">2023/3/5 <a class="header-anchor" href="#_2023-3-5" aria-label="Permalink to &quot;2023/3/5&quot;">​</a></h2><ul><li>无</li></ul>`,13),e=[p];function t(r,c,i,D,y,F){return l(),a("div",null,e)}const A=s(n,[["render",t]]);export{d as __pageData,A as default};
