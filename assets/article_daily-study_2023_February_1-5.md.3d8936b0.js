import{_ as s,c as l,o as a,a as n}from"./app.f9ecb9d2.js";const F=JSON.parse('{"title":"2023/2/1 - 2023/2/5","description":"","frontmatter":{},"headers":[{"level":2,"title":"2023/2/1","slug":"_2023-2-1","link":"#_2023-2-1","children":[]},{"level":2,"title":"2023/2/2","slug":"_2023-2-2","link":"#_2023-2-2","children":[]},{"level":2,"title":"2023/2/3","slug":"_2023-2-3","link":"#_2023-2-3","children":[]},{"level":2,"title":"2023/2/4","slug":"_2023-2-4","link":"#_2023-2-4","children":[]},{"level":2,"title":"2023/2/5","slug":"_2023-2-5","link":"#_2023-2-5","children":[]}],"relativePath":"article/daily-study/2023/February/1-5.md"}'),p={name:"article/daily-study/2023/February/1-5.md"},o=n(`<h1 id="_2023-2-1-2023-2-5" tabindex="-1">2023/2/1 - 2023/2/5 <a class="header-anchor" href="#_2023-2-1-2023-2-5" aria-hidden="true">#</a></h1><h2 id="_2023-2-1" tabindex="-1">2023/2/1 <a class="header-anchor" href="#_2023-2-1" aria-hidden="true">#</a></h2><ul><li><p>建立JS能力检验侧边栏（对于手写的题目以及训练的JS题目进行收集）</p><p><a href="https://codevity.top/article/web/javascript/examine/1-%E6%89%8B%E5%86%99%E9%A2%98.html" target="_blank" rel="noreferrer">JS能力检验</a></p></li><li><p>slice 和 substr(废弃) 和 substring 区别</p><ul><li><p>slice</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// slice(start, end) 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分  负数表示从后面开始数</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//ll</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//d  -1表示最后一个字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//-1   表示0</span></span>
<span class="line"></span></code></pre></div></li><li><p>substr(废弃)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// substr(start,length)方法可在字符串中抽取从开始下标开始的指定数目的字符  需要注意的是: 空格也是字符</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//o wrold      hello wrold</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//substr(start,length)   llo</span></span>
<span class="line"></span></code></pre></div></li><li><p>substring</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// substr(from,to)方法用于提取字符串中介于两个指定下标之间的字符   负数表示0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//o wrold</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//substr(from,to)   ll</span></span>
<span class="line"></span></code></pre></div></li><li><p>slice()和substring()区别</p><ul><li>当第二个参数为负数时,结果有区别</li><li>slice负数从后开始</li><li>substring负数从0开始</li></ul></li></ul></li></ul><h2 id="_2023-2-2" tabindex="-1">2023/2/2 <a class="header-anchor" href="#_2023-2-2" aria-hidden="true">#</a></h2><ul><li><p>写出了符合Promise A+规范的Promise代码</p><p><a href="https://codevity.top/article/web/javascript/examine/3-Promise%20A+.html" target="_blank" rel="noreferrer">符合Promise A+规范的Promise代码</a></p></li><li><p>写出简易版本的Promise（主要实现异步回调）</p></li><li><p>小知识点</p><ul><li>nvm 切换默认版本 nvm alias default 版本号</li><li>video 透明背景插件 <code>video-animation-player</code></li></ul></li></ul><h2 id="_2023-2-3" tabindex="-1">2023/2/3 <a class="header-anchor" href="#_2023-2-3" aria-hidden="true">#</a></h2><ul><li><p>编译最后一步 - generate(生成代码) =&gt; 字符串拼接 =&gt; 拼接完成后 new Function 执行代码</p><p><a href="https://github.com/iygxv/vue3_dev_v2/blob/main/packages/compiler-dom/src/generate.ts" target="_blank" rel="noreferrer">generate.ts</a></p></li></ul><h2 id="_2023-2-4" tabindex="-1">2023/2/4 <a class="header-anchor" href="#_2023-2-4" aria-hidden="true">#</a></h2><ul><li><p>复习了下重置、回滚等git操作</p></li><li><p>学会了交互式变基</p><p><a href="https://codevity.top/article/harvest/git/2-sourcetree%E6%93%8D%E4%BD%9C.html" target="_blank" rel="noreferrer">git_sourcetree常用操作</a></p></li></ul><h2 id="_2023-2-5" tabindex="-1">2023/2/5 <a class="header-anchor" href="#_2023-2-5" aria-hidden="true">#</a></h2><ul><li><p><strong>复习</strong></p><ul><li><p>vue3编译原理3个步骤</p><ul><li>①解析成ast（parse）</li><li>②转换（transform） =&gt; 将ast语法进行转化 (优化、静态提升、方法缓存（生成代码为了最终生成代码时使用）等等)</li><li>③生成字符串代码（generate） =&gt; 最后用new Function执行</li></ul></li><li><p>复习git操作</p><ul><li>重置（reset）一般用在<code>本地</code> =&gt; 用于撤销当前本地操作（修改commit）</li><li>回滚（revert）一般用于<code>远程</code> =&gt; 回滚是<code>原操作的反操作</code></li><li>变基， 与合并差不多， 只是显示的SourceTree的图表不一样。（一般我的操作是合并到dv、master等分支就用merger， 如果合并同事代码就用变基）</li><li>交互式变基，多用于<code>将本地的多个commit合并至一个commit</code></li></ul></li><li><p>slice()和substring()区别</p><ul><li><p>俩这负数的结果会不一样，正数结果一样</p></li><li><p>slice 负数从后面开始（-1代表后面第一个）</p></li><li><p>substring 负数从0开始</p></li></ul></li><li><p>散乱知识点</p><ul><li><p>使函数具有扩展形式 ，可以使用<code>回调</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 其他逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 需要执行的函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">（）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"></span></code></pre></div></li><li><p>切片AOP =&gt; 在不改变原有的逻辑， 扩展</p></li><li><p>promise.then() 返回的不是promise， 就会直接走下一个then（传透）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 源码的实现</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 是函数返回函数,不是函数返回值传给下面</span></span>
<span class="line"><span style="color:#A6ACCD;">onFulfilled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> onFulfilled </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> onFulfilled </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> val </span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>日常</p><ul><li>元宵节快乐</li><li>找房子（搬家了）</li></ul></li></ul></li></ul>`,11),e=[o];function t(r,c,i,y,A,C){return a(),l("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
