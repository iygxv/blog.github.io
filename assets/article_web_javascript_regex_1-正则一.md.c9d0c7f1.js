import{_ as s,c as a,o as n,a as o}from"./app.f9ecb9d2.js";const C=JSON.parse('{"title":"从零开始学正则（一），学习正则字符组，量词表示法与正则分支","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.  正则表达式字符匹配攻略","slug":"_1-正则表达式字符匹配攻略","link":"#_1-正则表达式字符匹配攻略","children":[{"level":3,"title":"1.1. 两种模糊匹配","slug":"_1-1-两种模糊匹配","link":"#_1-1-两种模糊匹配","children":[]}]},{"level":2,"title":"1.2. 字符组","slug":"_1-2-字符组","link":"#_1-2-字符组","children":[]},{"level":2,"title":"1.3. 量词","slug":"_1-3-量词","link":"#_1-3-量词","children":[]},{"level":2,"title":"1.4. 多选分支","slug":"_1-4-多选分支","link":"#_1-4-多选分支","children":[]},{"level":2,"title":"1.5. 案例分析","slug":"_1-5-案例分析","link":"#_1-5-案例分析","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"article/web/javascript/regex/1-正则一.md"}'),l={name:"article/web/javascript/regex/1-正则一.md"},p=o(`<h1 id="从零开始学正则-一-学习正则字符组-量词表示法与正则分支" tabindex="-1">从零开始学正则（一），学习正则字符组，量词表示法与正则分支 <a class="header-anchor" href="#从零开始学正则-一-学习正则字符组-量词表示法与正则分支" aria-hidden="true">#</a></h1><h2 id="_1-正则表达式字符匹配攻略" tabindex="-1">1. 正则表达式字符匹配攻略 <a class="header-anchor" href="#_1-正则表达式字符匹配攻略" aria-hidden="true">#</a></h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。 请记住这句话。然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。 内容包括：</p><ul><li>两种模糊匹配</li><li>字符组</li><li>量词</li><li>分支结构</li><li>案例分析</li></ul><h3 id="_1-1-两种模糊匹配" tabindex="-1">1.1. 两种模糊匹配 <a class="header-anchor" href="#_1-1-两种模糊匹配" aria-hidden="true">#</a></h3><p>如果正则只有精确匹配是没多大意义的，比如 <code>/hello/</code>，也只能匹配字符串中的 &quot;hello&quot; 这个子串。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; true</span></span>
<span class="line"></span></code></pre></div><p>正则表达式之所以强大，是因为其能实现模糊匹配。 而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。</p><h4 id="_1-1-1-横向模糊匹配" tabindex="-1">1.1.1. 横向模糊匹配 <a class="header-anchor" href="#_1-1-1-横向模糊匹配" aria-hidden="true">#</a></h4><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。 其实现的方式是使用量词。譬如<code> {m,n}</code>，表示连续出现最少 m 次，最多 n 次。 比如正则 <code>/ab{2,5}c/ </code>表示匹配这样一个字符串：第一个字符是 &quot;a&quot;，接下来是 2 到 5 个字符 &quot;b&quot;，最后是字符 &quot;c&quot;。 测试如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">{2,5}</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc abbc abbbc abbbbc abbbbbc abbbbbbc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;abbc&quot;, &quot;abbbc&quot;, &quot;abbbbc&quot;, &quot;abbbbbc&quot;]</span></span>
<span class="line"></span></code></pre></div><p>案例中用的正则是<code> /ab{2,5}c/g</code>，其中 g 是正则的一个修饰符。表示全局匹配，即，在目 标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个” 。g 是单词 global 的首字母。</p><h4 id="_1-1-2-纵向模糊匹配" tabindex="-1">1.1.2. 纵向模糊匹配 <a class="header-anchor" href="#_1-1-2-纵向模糊匹配" aria-hidden="true">#</a></h4><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。 其实现的方式是使用字符组。譬如 [abc]，表示该字符是可以字符 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 中的任何一个。 比如<code> /a[123]b/</code> 可以匹配如下三种字符串： &quot;a1b&quot;、&quot;a2b&quot;、&quot;a3b&quot;。 测试如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a0b a1b a2b a3b a4b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;a1b&quot;, &quot;a2b&quot;, &quot;a3b&quot;]</span></span>
<span class="line"></span></code></pre></div><h2 id="_1-2-字符组" tabindex="-1">1.2. 字符组 <a class="header-anchor" href="#_1-2-字符组" aria-hidden="true">#</a></h2><p>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。 例如<code> [abc]</code>，表示匹配一个字符，它可以是 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 之一。</p><h4 id="_1-2-1-范围表示法" tabindex="-1">1.2.1. 范围表示法 <a class="header-anchor" href="#_1-2-1-范围表示法" aria-hidden="true">#</a></h4><p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。 比如 [123456abcdefGHIJKLM]，可以写成 [1-6a-fG-M]。用连字符 - 来省略和简写。 因为连字符有特殊用途，那么要匹配 &quot;a&quot;、&quot;-&quot;、&quot;z&quot; 这三者中任意一个字符，该怎么做呢？ 不能写成 [a-z]，因为其表示小写字符中的任何一个字符。 可以写成如下的方式：[-az] 或 [az-] 或 [a-z]。 即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p><h4 id="_1-2-2-排除字符组" tabindex="-1">1.2.2. 排除字符组 <a class="header-anchor" href="#_1-2-2-排除字符组" aria-hidden="true">#</a></h4><p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是 &quot;a&quot;、&quot;b&quot;、&quot;c&quot;。 此时就是排除字符组（反义字符组）的概念。例如 [^abc]，表示是一个除 &quot;a&quot;、&quot;b&quot;、&quot;c&quot;之外的任意一个字 符。字符组的第一位放 ^（脱字符），表示求反的概念。 当然，也有相应的范围表示法</p><h4 id="_1-2-3-常见的简写形式" tabindex="-1">1.2.3. 常见的简写形式 <a class="header-anchor" href="#_1-2-3-常见的简写形式" aria-hidden="true">#</a></h4><p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p><table><thead><tr><th>字符组</th><th>具体含义</th></tr></thead><tbody><tr><td>\\d</td><td>[0-9]表示是一位数字，digit数字。</td></tr><tr><td>\\D</td><td>[^0-9]表示除数字以外的任意字符。</td></tr><tr><td>\\w</td><td>[0-9a-zA-Z_]表示数字，大小写字母和下划线，word简写，又称单词字符。</td></tr><tr><td>\\W</td><td>[^0-9a-zA-Z_]，非单词字符。</td></tr><tr><td>\\s</td><td>[ \\t\\v\\n\\r\\f]表示空白符。包含空格，水平制表符，垂直制表符，换行符，回车符，换页符。</td></tr><tr><td>\\S</td><td>[^ \\t\\v\\n\\r\\f]，非空白符。</td></tr><tr><td>.</td><td>[^\\n\\r\\u2028\\u2029]，通配符，表示除了换行符，回车符，行分隔符和段分隔符之外任意字符。</td></tr><tr><td><strong>空白符</strong></td><td></td></tr><tr><td>空格：顾名思义，就是我们理解的空格</td><td></td></tr></tbody></table><p>水平制表符\\t：类似于tab键缩进的效果，一般系统中水平制表符占8列，所以根据你按的次数占据8*N列。</p><p>垂直制表符\\v：让文本从下一行开始输出，且开始的列数为\\v前字符的后一列。</p><p>换行符\\n：从下一行开头开始输出，这个js可以跑。</p><p>回车符\\r：这里的回车不是我们理解的enter回车另起一行开始输出，而是回到当前行开头输出，还可能将已输入文本替换,替换这一点根据环境不同表现不同。</p><p>换页符\\f：在输出\\f后面文本之前，会先将当前屏幕清空，类似于先清除再输出。</p><p><strong>匹配任意字符</strong> 如果要匹配任意字符怎么办？可以使用 [\\d\\D]、[\\w\\W]、[\\s\\S] 和 [^] 中任何的一个。</p><h2 id="_1-3-量词" tabindex="-1">1.3. 量词 <a class="header-anchor" href="#_1-3-量词" aria-hidden="true">#</a></h2><p>量词也称重复。掌握 <code>{m,n}</code> 的准确含义后，只需要记住一些简写形式。</p><table><thead><tr><th>量词</th><th>具体含义</th></tr></thead><tbody><tr><td><code>{m,}</code></td><td>表示至少出现 m 次。</td></tr><tr><td><code>{m}</code></td><td>等价于 {m,m}，表示出现 m 次。</td></tr><tr><td><code>{m,n}</code></td><td>至少出现m次，最多出现n次。</td></tr><tr><td>?</td><td>等价于 {0,1}，表示出现或者不出现。</td></tr><tr><td>+</td><td>等价于 {1,}，表示出现至少一次。</td></tr><tr><td>*</td><td>等价于 {0,}，表示出现任意次，有可能不出现。</td></tr></tbody></table><h4 id="_1-3-2-贪婪匹配与惰性匹配" tabindex="-1">1.3.2. 贪婪匹配与惰性匹配 <a class="header-anchor" href="#_1-3-2-贪婪匹配与惰性匹配" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2,5}/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123 1234 12345 123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span></span>
<span class="line"></span></code></pre></div><p>其中正则<code> /\\d{2,5}/</code>，表示数字连续出现 2 到 5 次。会匹配 2 位、3 位、4 位、5 位连续数字。 但是其是贪婪的，它会尽可能多的匹配。你能给我 6 个，我就要 5 个。你能给我 3 个，我就要 3 个。 反正只要在能力范围内，越多越好。 我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{2,5}?/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123 1234 12345 123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span></span>
<span class="line"></span></code></pre></div><p>其中<code> /\\d{2,5}?/</code> 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不再往下尝试了。</p><p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下</p><table><thead><tr><th>惰性量词</th><th>贪婪量词</th></tr></thead><tbody><tr><td><code>{m,} ?</code></td><td><code>{m,} </code></td></tr><tr><td><code>{m} ? </code></td><td><code>{m} </code></td></tr><tr><td><code>{m,n} ?</code></td><td><code>{m,n} </code></td></tr><tr><td>? ?</td><td>?</td></tr><tr><td>+?</td><td>+</td></tr><tr><td>* ?</td><td>*</td></tr><tr><td>对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？</td><td></td></tr></tbody></table><h2 id="_1-4-多选分支" tabindex="-1">1.4. 多选分支 <a class="header-anchor" href="#_1-4-多选分支" aria-hidden="true">#</a></h2><p>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。 具体形式如下：<code>(p1|p2|p3)</code>，其中 p1、p2 和 p3 是子模式，用 |（管道符）分隔，表示其中任何之一。 例如要匹配字符串 &quot;good&quot; 和 &quot;nice&quot; 可以使用 /good|nice/</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">good</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">nice</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">good idea, nice try.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span></span>
<span class="line"></span></code></pre></div><p>但有个事实我们应该注意，比如我用<code> /good|goodbye/</code>，去匹配 &quot;goodbye&quot; 字符串时，结果是 &quot;good&quot;：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">good</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">goodbye</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">goodbye</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;good&quot;]</span></span>
<span class="line"></span></code></pre></div><p>而把正则改成<code> /goodbye|good/</code>，结果是：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">goodbye</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">good</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">goodbye</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(regex) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [&quot;goodbye&quot;]</span></span>
<span class="line"></span></code></pre></div><p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p><h2 id="_1-5-案例分析" tabindex="-1">1.5. 案例分析 <a class="header-anchor" href="#_1-5-案例分析" aria-hidden="true">#</a></h2><p>匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。</p><h4 id="_1-5-1-匹配时间" tabindex="-1">1.5.1. 匹配时间 <a class="header-anchor" href="#_1-5-1-匹配时间" aria-hidden="true">#</a></h4><p>以 24 小时制为例。 要求匹配： 23:59 02:07</p><p>分析：</p><p>共 4 位数字，第一位数字可以为 [0-2]。</p><p>当第 1 位为 &quot;2&quot; 时，第 2 位可以为 [0-3]，其他情况时，第 2 位为 [0-9]。</p><p>第 3 位数字为 [0-5]，第4位为 [0-9]。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">([</span><span style="color:#C3E88D;">01</span><span style="color:#89DDFF;">][</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]|[</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">][</span><span style="color:#C3E88D;">0-3</span><span style="color:#89DDFF;">])</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-5</span><span style="color:#89DDFF;">][</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">23:59</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">02:07</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; true</span></span>
<span class="line"></span></code></pre></div><h4 id="_1-5-2-匹配日期" tabindex="-1">1.5.2. 匹配日期 <a class="header-anchor" href="#_1-5-2-匹配日期" aria-hidden="true">#</a></h4><p>比如 yyyy-mm-dd 格式为例。 要求匹配：2017-06-10</p><p>分析：</p><p>年，四位数字即可，可用 [0-9]{4}。</p><p>月，共 12 个月，分两种情况 &quot;01&quot;、&quot;02&quot;、…、&quot;09&quot; 和 &quot;10&quot;、&quot;11&quot;、&quot;12&quot;，可用 (0[1-9]|1[0-2])。</p><p>日，最大 31 天，可用 (0[1-9]|[12][0-9]|3[01])。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]{4}</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">1-9</span><span style="color:#89DDFF;">]|</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">0-2</span><span style="color:#89DDFF;">])</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">1-9</span><span style="color:#89DDFF;">]|[</span><span style="color:#C3E88D;">12</span><span style="color:#89DDFF;">][</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]|</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">01</span><span style="color:#89DDFF;">])</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">( regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2017-06-10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; true</span></span>
<span class="line"></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://github.com/qdlaoyao/js-regex-mini-book" target="_blank" rel="noreferrer"> 老姚《JavaScript正则迷你书》</a></p>`,66),t=[p];function e(c,r,D,y,F,d){return n(),a("div",null,t)}const u=s(l,[["render",e]]);export{C as __pageData,u as default};
