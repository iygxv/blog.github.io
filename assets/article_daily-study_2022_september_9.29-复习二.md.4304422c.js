import{_ as e,c as t,o as s,a as r}from"./app.f58bd366.js";const g=JSON.parse('{"title":"9.29-复习二","description":"","frontmatter":{},"headers":[{"level":2,"title":"HTTP的缓存控制","slug":"http的缓存控制","link":"#http的缓存控制","children":[]},{"level":2,"title":"HTTPS是什么? SSL/TLS又是什么?","slug":"https是什么-ssl-tls又是什么","link":"#https是什么-ssl-tls又是什么","children":[{"level":3,"title":"SSL/TLS","slug":"ssl-tls","link":"#ssl-tls","children":[]}]},{"level":2,"title":"对称加密与非对称加密","slug":"对称加密与非对称加密","link":"#对称加密与非对称加密","children":[]},{"level":2,"title":"HTTP/2.0","slug":"http-2-0","link":"#http-2-0","children":[]}],"relativePath":"article/daily-study/2022/september/9.29-复习二.md"}'),o={name:"article/daily-study/2022/september/9.29-复习二.md"},l=r('<h1 id="_9-29-复习二" tabindex="-1">9.29-复习二 <a class="header-anchor" href="#_9-29-复习二" aria-hidden="true">#</a></h1><h2 id="http的缓存控制" tabindex="-1"><strong>HTTP的缓存控制</strong> <a class="header-anchor" href="#http的缓存控制" aria-hidden="true">#</a></h2><p>max-age是 HTTP 缓存控制最常用的属性，此外在响应报文里还可以用其他的属性来更精确地指示浏览器应该如何使用缓存:</p><ul><li>no_store(<strong>不允许缓存</strong>)</li><li>no_cache(<strong>可以缓存</strong>，但在使用之前必须要去服务器验证是否过期，是否有最新的版本)</li><li>must-revalidate(意思是如果缓存不过期就可以继续使用，但过期了如果还想用就必须去服务器验证)</li></ul><p><strong>客户端请求字段</strong></p><p>最常用的是<strong>if-Modified-Since</strong>和<strong>If-None- Match</strong>这两个。</p><p>需要第一次的响应报文预先提供<strong>Last-modified</strong>和<strong>ETag</strong>，然后第二次请求时就可以带上缓存里的原值，验证资源是否是最新的。</p><p><strong>服务端返回字段</strong></p><p>Last-modified(<strong>文件的最后修改时间</strong>)</p><p>ETag(<strong>资源的一个唯一标识</strong>)</p><h2 id="https是什么-ssl-tls又是什么" tabindex="-1"><strong>HTTPS是什么? SSL/TLS又是什么?</strong> <a class="header-anchor" href="#https是什么-ssl-tls又是什么" aria-hidden="true">#</a></h2><p>HTTPS 其实是一个非常简单的协议,面规定了<strong>新的协议名https，默认端口号 443</strong></p><p>HTTPS 把 HTTP 下层的传输协议由 TCP/IP 换成了 SSL/TLS，由<strong>HTTP over TCP/IP</strong>变成了<strong>HTTP over SSL/TLS</strong>，让 HTTP 运行在了安全的 SSL/TLS 协议上，收发报文不再使用 Socket API， 而是调用专门的安全接口。</p><h3 id="ssl-tls" tabindex="-1"><strong>SSL/TLS</strong> <a class="header-anchor" href="#ssl-tls" aria-hidden="true">#</a></h3><p>SSL 即安全套接层(Secure Sockets Layer)，在 OSI 模型中处于第 5 层(会话层)，由网景公司于 1994 年发明，有 v2 和 v3 两个版本，而 v1 因为有严重的缺陷从未公开过。</p><p>SSL 发展到 v3 时已经证明了它自身是一个非常好的安全通信协议，于是互联网工程组 IETF <code>在 1999 年</code>把它改名为 TLS(传输层安全，Transport Layer Security)，正式标准化，版本号从 1.0 重新算起，所以<code> TLS1.0 实际上就是 SSLv3.1</code>。</p><p>到今天 TLS 已经发展出了三个版本，分别是 2006 年的 1.1、2008 年的 1.2 和去年 (2018)的 1.3，每个新版本都紧跟密码学的发展和互联网的现状，持续强化安全和性 能，已经成为了信息安全领域中的权威标准。</p><p>目前应用的<code>最广泛的 TLS 是 1.2</code>，而之前的协议(TLS1.1/1.0、SSLv3/v2)都已经被认为是不安全的，各大浏览器即将在 2020 年左右停止支持，所以接下来的讲解都针对的是 TLS1.2。</p><p>TLS 由记录协议、握手协议、警告协议、变更密码规范协议、扩展协议等几个子协议组成， 综合使用了对称加密、非对称加密、身份认证等许多密码学前沿技术。</p><h2 id="对称加密与非对称加密" tabindex="-1"><strong>对称加密与非对称加密</strong> <a class="header-anchor" href="#对称加密与非对称加密" aria-hidden="true">#</a></h2><ul><li><code>对称加密只使用一个密钥</code>，运算速度快，密钥必须保密，<code>无法做到安全的密钥交换</code>，常用的有 AES 和 ChaCha20</li><li><code>非对称加密使用两个密钥:公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢，常用的有 RSA 和 ECC</code></li><li>把对称加密和非对称加密结合起来就得到了又好又快的混合加密，也就是<code> TLS 里使用的加密方式(混合加密)</code><ul><li>在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题。</li><li>然后用随机数产生对称算法使用的<strong>会话密钥</strong>(session key)，再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。</li><li>对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密。</li></ul></li></ul><h2 id="http-2-0" tabindex="-1"><strong>HTTP/2.0</strong> <a class="header-anchor" href="#http-2-0" aria-hidden="true">#</a></h2><ul><li>二进制协议，不再是纯文本(<code>二进制协议</code>)</li><li>可发起多个请求，废弃了 1.1 里的管道(<code>多路复用</code>)</li><li>使用专用算法压缩头部，减少数据传输量(<code>头部压缩, 使得可以在header带更多数据了</code>)</li><li>允许服务器主动向客户端推送数据(<code>服务器主动push数据到客户端</code>)</li><li>增强了安全性，事实上要求加密通信(<code>安全性</code>)</li></ul>',23),i=[l];function a(n,d,c,h,p,S){return s(),t("div",null,i)}const _=e(o,[["render",a]]);export{g as __pageData,_ as default};
