import{_ as s,c as l,o as n,a}from"./app.f58bd366.js";const p="/assets/image-20220113143310110.56816f00.png",o="/assets/image-20220113143528101.44bc4d8f.png",e="/assets/image-20220113145002138.f1b0e735.png",t="/assets/image-20220113145019074.08b090a1.png",r="/assets/image-20220113145209207.249c08de.png",c="/assets/image-20220113145241946.cc68c388.png",i="/assets/image-20220113145441250.773947fc.png",D="/assets/image-20220113145558419.b263c873.png",y="/assets/image-20220113150005581.4a135291.png",F="/assets/image-20220113150043262.a286cc77.png",C="/assets/image-20220113152016883.b9d1f0a3.png",A="/assets/image-20220113163616182.ba7ea78a.png",g="/assets/image-20220113164907375.fe857060.png",u="/assets/image-20220113165004448.af871b1c.png",d="/assets/image-20220113165406860.ba0bb07e.png",h="/assets/image-20220113170258629.e0310ac8.png",S=JSON.parse('{"title":"Webpack学习二","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.模块","slug":"_1-模块","link":"#_1-模块","children":[{"level":3,"title":"Mode配置","slug":"mode配置","link":"#mode配置","children":[]},{"level":3,"title":"source-map","slug":"source-map","link":"#source-map","children":[]}]},{"level":2,"title":"2.Babel的深入解析","slug":"_2-babel的深入解析","link":"#_2-babel的深入解析","children":[{"level":3,"title":"认识polyfill","slug":"认识polyfill","link":"#认识polyfill","children":[]},{"level":3,"title":"配置babel.config.js","slug":"配置babel-config-js","link":"#配置babel-config-js","children":[]}]},{"level":2,"title":"3.创建vue3项目","slug":"_3-创建vue3项目","link":"#_3-创建vue3项目","children":[]},{"level":2,"title":"4.搭建本地服务器","slug":"_4-搭建本地服务器","link":"#_4-搭建本地服务器","children":[]},{"level":2,"title":"5.模块热替换（HMR）","slug":"_5-模块热替换-hmr","link":"#_5-模块热替换-hmr","children":[]},{"level":2,"title":"6.devServer","slug":"_6-devserver","link":"#_6-devserver","children":[{"level":3,"title":"publicPath属性","slug":"publicpath属性","link":"#publicpath属性","children":[]},{"level":3,"title":"contentBase属性","slug":"contentbase属性","link":"#contentbase属性","children":[]},{"level":3,"title":"hotOnly、host配置","slug":"hotonly、host配置","link":"#hotonly、host配置","children":[]},{"level":3,"title":"port、open、compress","slug":"port、open、compress","link":"#port、open、compress","children":[]},{"level":3,"title":"Proxy代理","slug":"proxy代理","link":"#proxy代理","children":[]},{"level":3,"title":"historyApiFallback","slug":"historyapifallback","link":"#historyapifallback","children":[]}]},{"level":2,"title":"7.resolve模块解析","slug":"_7-resolve模块解析","link":"#_7-resolve模块解析","children":[]},{"level":2,"title":"8.入口文件解析","slug":"_8-入口文件解析","link":"#_8-入口文件解析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"article/web/engineered/webpack/2-webpack学习二.md"}'),b={name:"article/web/engineered/webpack/2-webpack学习二.md"},m=a(`<h1 id="webpack学习二" tabindex="-1">Webpack学习二 <a class="header-anchor" href="#webpack学习二" aria-hidden="true">#</a></h1><h2 id="_1-模块" tabindex="-1">1.模块 <a class="header-anchor" href="#_1-模块" aria-hidden="true">#</a></h2><h3 id="mode配置" tabindex="-1">Mode配置 <a class="header-anchor" href="#mode配置" aria-hidden="true">#</a></h3><p><a href="https://webpack.docschina.org/configuration/mode/" target="_blank" rel="noreferrer">官方文档</a></p><ul><li><p><strong>Mode配置选项，可以告知webpack使用响应模式的内置优化</strong></p><ul><li>默认值是<strong>production</strong>（什么都不设置的情况下）</li><li>可选值有：<strong>none</strong> | <strong>development</strong> | <strong>production</strong></li></ul></li><li><p><strong>这几个选项有什么样的区别呢?</strong></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>development</td><td>会将 <code>DefinePlugin</code> 中 <code>p<wbr>rocess.env.NODE_ENV</code> 的值设置为 <code>development</code>. 为模块和 chunk 启用有效的名。</td></tr><tr><td>production</td><td>会将 <code>DefinePlugin</code> 中 <code>p<wbr>rocess.env.NODE_ENV</code> 的值设置为 <code>production</code>。为模块和 chunk 启用确定性的混淆名称，<code>FlagDependencyUsagePlugin</code>，<code>FlagIncludedChunksPlugin</code>，<code>ModuleConcatenationPlugin</code>，<code>NoEmitOnErrorsPlugin</code> 和 <code>TerserPlugin</code> 。</td></tr><tr><td>none</td><td>不使用任何默认优化选项</td></tr></tbody></table></li></ul><h3 id="source-map" tabindex="-1">source-map <a class="header-anchor" href="#source-map" aria-hidden="true">#</a></h3><p><a href="https://webpack.docschina.org/configuration/devtool/#root" target="_blank" rel="noreferrer">官方文档</a></p><p>代码报错需要调试时（debug），调试转换后的代码是很困难的, 能保证代码不出错吗？不可能</p><ul><li><p><strong>代码通常运行在浏览器上时，是通过打包压缩的</strong></p><ul><li>也就是真实跑在浏览器上的代码，和我们编写的代码其实是有<strong>差异</strong>的</li><li>比如<strong>ES6的代码可能被转换成ES5</strong></li><li>比如<strong>对应的代码行号、列号在经过编译后肯定会不一致</strong></li><li>比如<strong>代码进行丑化压缩时，会将编码名称等修改</strong></li><li>比如我们<strong>使用了TypeScript等方式编写的代码，最终转换成JavaScrip</strong>t</li></ul></li><li><p><strong>如何可以调试这种转换后不一致的代码呢？答案就是source-map</strong></p><ul><li><strong>source-map是从已转换的代码，映射到原始的源文件</strong></li><li>使浏览器可以重构原始源并在调试器中显示重建的原始源</li></ul></li><li><p><strong>如何使用source-map</strong></p><ul><li><p>第一步：根据源文件，生成source-map文件，webpack在打包时，可以通过<strong>配置生成source-map</strong></p></li><li><p>第二步：在转换后的代码，<strong>最后添加一个注释</strong>，它指向sourcemap</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;">## sourceMappingURL</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">common.bundle.js.map</span></span>
<span class="line"></span></code></pre></div></li><li><p>浏览器会<strong>根据我们的注释</strong>，查找响应的source-map，并且根据source-map还原我们的代码，方便进行调试</p></li><li><p>在Chrome中，我们可以按照如下的方式打开source-map</p><p><img src="`+p+'" alt="image-20220113143310110"></p></li></ul></li><li><p><strong>分析source-map</strong></p><ul><li>最初source-map生成的文件带下是<strong>原始文件的10倍</strong>，<strong>第二版减少了约50%</strong>，<strong>第三版又减少了50%</strong>，所以目前一个 133kb的文件，最终的source-map的大小大概在300kb</li><li>目前的source-map长什么样子呢？ <ul><li><strong>version</strong>：当前使用的版本，也就是最新的第三版</li><li><strong>sources</strong>：从哪些文件转换过来的source-map和打包的代码（最初始的文件）</li><li><strong>names</strong>：转换前的变量和属性名称（因为我目前使用的是development模式，所以不需要保留转换前的名 称）</li><li><strong>mappings</strong>：source-map用来和源文件映射的信息（比如位置信息等），一串base64 VLQ（veriable- length quantity可变长度值）编码</li><li><strong>file</strong>：打包后的文件（浏览器加载的文件）</li><li><strong>sourceContent</strong>：转换前的具体代码信息（和sources是对应的关系）</li><li><strong>sourceRoot</strong>：所有的sources相对的根目录</li></ul></li></ul></li></ul><p><img src="'+o+`" alt="image-20220113143528101"></p><ul><li><strong>生成source-map</strong><ul><li>webpack为我们提供了非常多的选项（目前是26个），来处理source-map；</li><li><a href="https://webpack.docschina.org/configuration/devtool/" target="_blank" rel="noreferrer">https://webpack.docschina.org/configuration/devtool/</a></li><li>选择不同的值，生成的source-map会稍微有差异，打包的过程也会有性能的差异，可以根据不同的情况进行 选择</li></ul></li></ul><h2 id="_2-babel的深入解析" tabindex="-1">2.Babel的深入解析 <a class="header-anchor" href="#_2-babel的深入解析" aria-hidden="true">#</a></h2><ul><li><p><strong>为什么需要Babel？</strong></p><ul><li>开发中，我们想要使用E<strong>S6+的语法</strong>，想要使用TypeScript，<strong>开发</strong>React项目，它们都是离不开Babel的</li></ul></li><li><p><strong>Babel是什么呢？</strong></p><ul><li>Babel是一个<strong>工具链</strong>，主要用于旧浏览器或者缓解中将ECMAScript 2015+代码转换为<strong>向后兼容版本</strong>的JavaScript</li><li>包括：<strong>语法转换、源代码转换、Polyfill实现目标缓解缺少</strong>的功能等</li></ul></li><li><p><strong>Babel命令行使用</strong></p><ul><li><p>babel本身可以作为一个独立的工具（和postcss一样），不和webpack等构建工具配置来单独使用</p></li><li><p>如果希望在命令行尝试使用babel，需要安装如下库</p><ul><li>@babel/core：babel的核心代码，必须安装</li><li>@babel/cli：可以让我们在命令行使用babel</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@babel/cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@babel/core</span></span>
<span class="line"></span></code></pre></div></li><li><p>babel来处理我们的源代码</p><ul><li><p>src：是源文件的目录</p></li><li><p>--out-dir：指定要输出的文件夹dist</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-dir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>插件的使用</p><ul><li><p>比如我们需要转换箭头函数，那么我们就可以使用箭头函数转换相关的插件</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">@babel/plugin-transform-arrow-functions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-dir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--plugins=@babel/plugin-transform-arrow-functions</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>Babel的预设preset</p><ul><li><p>如果要转换的内容过多，一个个设置是比较麻烦的，我们可以使用预设（preset）</p></li><li><p>安装@babel/preset-env预设</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"></span></code></pre></div></li><li><p>执行如下命令</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-dir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--presets=@babel/preset-env</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li><li><p><strong>Babel的底层原理</strong></p><ul><li><p>babel是<strong>如何做到</strong>将我们的一段代码（ES6、TypeScript、React）转成另外一段代码（ES5）的呢？</p><ul><li>从一种源代码（原生语言）转换成另一种源代码（目标语言），这是什么的工作呢？</li><li>就是<strong>编译器</strong>，事实上我们可以将babel看成就是一个编译器。</li><li>Babel编译器的作用就是将我们的源代码，转换成浏览器可以直接识别的另外一段源代码</li></ul></li><li><p>Babel也拥有编译器的<strong>工作流程</strong>(三个阶段)</p><ul><li><strong>解析阶段</strong>（Parsing）</li><li><strong>转换阶段</strong>（Transformation）</li><li><strong>生成阶段</strong>（Code Generation）</li></ul></li><li><p>babel编译器执行原理</p><ul><li><p>Babel的执行阶段</p><p><img src="`+e+'" alt="image-20220113145002138"></p></li><li><p>具体</p><p><img src="'+t+`" alt="image-20220113145019074"></p></li></ul></li></ul></li><li><p><strong>babel-loader</strong></p><ul><li><p>实际开发中，我们通常会在构建工具中通过配置babel来对其进行使用的，比如在webpack中</p></li><li><p>安装相关的依赖</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">babel-loader</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@babel/core</span></span>
<span class="line"></span></code></pre></div></li><li><p>设置一个规则，在加载js文件时，使用babel</p><p><img src="`+r+'" alt="image-20220113145209207"></p></li><li><p>指定使用的插件</p><ul><li><p>必须指定使用的插件才会生效</p><p><img src="'+c+`" alt="image-20220113145241946"></p></li></ul></li><li><p>babel-preset(预设)</p><ul><li><p>如果我们一个个去安装使用插件，那么需要手动来管理大量的babel插件，我们可以直接给webpack提供一个 preset，<strong>webpack会根据我们的预设来加载对应的插件列表</strong>，并且将其传递给babel</p></li><li><p>常见的预设有三个</p><ul><li>env</li><li>react</li><li>TypeScript</li></ul></li><li><p>安装preset-env</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">yarn add </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">babel</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">preset</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">env</span></span>
<span class="line"></span></code></pre></div><p><img src="`+i+'" alt="image-20220113145441250"></p></li></ul></li><li><p>设置目标浏览器 browserslist</p><ul><li><p>最终打包的JavaScript代码，是需要跑在目标浏览器上的，那么如何告知babel我们的目标浏览器呢？</p><ul><li><p>browserslist工具</p></li><li><p>target属性</p><p><img src="'+D+'" alt="image-20220113145558419"></p></li></ul></li></ul></li><li><p>Babel的配置文件(独立文件)</p><ul><li>babel给我们提供了两种配置文件的编写 <ul><li>babel.config.json（或者.js，.cjs，.mjs）文件</li><li>.babelrc.json（或者.babelrc，.js，.cjs，.mjs）文件</li></ul></li></ul></li></ul></li></ul><h3 id="认识polyfill" tabindex="-1">认识polyfill <a class="header-anchor" href="#认识polyfill" aria-hidden="true">#</a></h3><ul><li><p><strong>Polyfill是什么呢？</strong></p><ul><li><strong>翻译</strong>：一种用于衣物、床具等的聚酯填充材料, 使这些物品更加温暖舒适</li><li><strong>理解</strong>：更像是应该填充物（垫片），一个<strong>补丁</strong>，可以帮助我们更好的使用JavaScript</li></ul></li><li><p><strong>为什么时候会用到polyfill呢？</strong></p><ul><li>比如我们使用了一些语法特性（例如：Promise, Generator, Symbol等以及实例方法例如Array.prototype.includes等）</li><li>但是某些浏览器压根不认识这些特性，必然会报错</li><li>我们可以使用polyfill来填充或者说打一个补丁，那么就会包含该特性了</li></ul></li><li><p><strong>如何使用polyfill？</strong></p><ul><li><p>babel7.4.0之前，可以使用 @babel/polyfill的包，但是该包现在已经不推荐使用了</p><p><img src="'+y+`" alt="image-20220113150005581"></p></li><li><p>babel7.4.0之后，可以通过单独引入core-js和regenerator-runtime来完成polyfill的使用</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">core-js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">regenerator-runtime</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save</span></span>
<span class="line"></span></code></pre></div><p><img src="`+F+'" alt="image-20220113150043262"></p></li></ul></li></ul><h3 id="配置babel-config-js" tabindex="-1">配置babel.config.js <a class="header-anchor" href="#配置babel-config-js" aria-hidden="true">#</a></h3><ul><li><strong>preset-env配置一些属性</strong><ul><li><strong>useBuiltIns</strong>：<strong>设置以什么样的方式来使用polyfill</strong></li><li><strong>corejs</strong>：<strong>设置corejs的版本</strong>，目前使用较多的是3.x的版本，比如我使用的是3.8.x的版本</li><li>另外corejs可以设置是否对提议阶段的特性进行支持</li><li>设置 proposals属性为true即可</li></ul></li><li><strong>useBuiltIns属性设置</strong><ul><li>useBuiltIns属性有三个常见的值</li><li>第一个值：<strong>false</strong><ul><li>打包后的文件不使用polyfill来进行适配</li><li>并且这个时候是不需要设置corejs属性的</li></ul></li><li>第二个值：<strong>usage</strong><ul><li>会根据源代码中出现的语言特性，自动检测所需要的polyfill</li><li>这样可以确保最终包里的polyfill数量的最小化，打包的包相对会小一些</li><li>可以设置corejs属性来确定使用的corejs的版本</li></ul></li><li>第三个值：<strong>entry</strong><ul><li>如果我们依赖的某一个库本身使用了某些polyfill的特性，但是因为我们使用的是usage，所以之后用户浏览器 可能会报错, 所以，如果你担心出现这种情况，可以使用 entry</li><li>并且需要在入口文件中添加 `import &#39;core-js/stable&#39;; import &#39;regenerator-runtime/runtime&#39;</li><li>这样做会根据 browserslist 目标导入所有的polyfill，但是对应的包也会变大</li></ul></li></ul></li></ul><p><img src="'+C+'" alt="image-20220113152016883"></p><h2 id="_3-创建vue3项目" tabindex="-1">3.创建vue3项目 <a class="header-anchor" href="#_3-创建vue3项目" aria-hidden="true">#</a></h2><p><a href="https://codevity.top/article/web/engineered/relevant/1-%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#webpack" target="_blank" rel="noreferrer">创建vue3项目</a></p><h2 id="_4-搭建本地服务器" tabindex="-1">4.搭建本地服务器 <a class="header-anchor" href="#_4-搭建本地服务器" aria-hidden="true">#</a></h2><ul><li><p><strong>目前我们开发的代码，为了运行需要有两个操作</strong></p><ul><li>操作一：npm run build，编译相关的代码</li><li>操作二：通过live server或者直接通过浏览器，打开index.html代码，查看效果</li></ul></li><li><p><strong>希望可以做到，当文件发生变化时，可以自动的完成编译和展示</strong></p></li><li><p><strong>为了完成自动编译，webpack提供了几种可选的方式</strong></p><ul><li>webpack watch mode</li><li>webpack-dev-server</li><li>webpack-dev-middleware</li></ul></li><li><p><strong>Webpack watch</strong></p><ul><li><p>webpack给我们提供了watch模式</p><ul><li>在该模式下，webpack依赖图中的所有文件，只要有一个发生了更新，那么代码将被重新编译</li><li>我们不需要手动去运行 npm run build指令了</li></ul></li><li><p>如何开启watch呢？两种方式</p><ul><li>方式一：在导出的配置中，添加 watch: true；</li><li>方式二：在启动webpack的命令中，添加 --watch的标识</li></ul><p><img src="'+A+`" alt="image-20220113163616182"></p></li></ul></li><li><p><strong>webpack-dev-server</strong></p></li><li><p><strong>webpack-dev-middleware</strong></p></li></ul><h2 id="_5-模块热替换-hmr" tabindex="-1">5.模块热替换（HMR） <a class="header-anchor" href="#_5-模块热替换-hmr" aria-hidden="true">#</a></h2><ul><li><p><strong>什么是HMR呢？</strong></p><ul><li>HMR的全称是Hot Module Replacement，翻译为模块热替换</li><li>模块热替换是指在 应用程序运行过程中，替换、添加、删除模块，而<strong>无需重新刷新</strong>整个页面</li></ul></li><li><p><strong>HMR通过如下几种方式，来提高开发的速度</strong></p><ul><li><strong>不重新加载整个页面</strong>，这样可以保留某些应用程序的状态不丢失</li><li><strong>只更新需要变化的内容</strong>，节省开发的时间</li><li><strong>修改了css、js源代码，会立即在浏览器更新</strong>，相当于直接在浏览器的devtools中直接修改样式</li></ul></li><li><p><strong>如何使用HMR呢？</strong></p></li><li><p>默认情况下，webpack-dev-server已经支持HMR，我们只需要开启即可</p></li><li><p>在不开启HMR的情况下，当我们修改了源代码之后，整个页面会自动刷新，使用的是live reloading</p></li><li><p><strong>开启HMR</strong></p><ul><li><p>修改webpack的配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>浏览器可以看到如下效果</p><p><img src="`+g+'" alt="image-20220113164907375"></p></li><li><p>但是会发现，当我们修改了某一个模块的代码时，依然是刷新的整个页面</p><ul><li>这是因为我们需要去指定哪些模块发生更新时，进行HMR</li></ul><p><img src="'+u+'" alt="image-20220113165004448"></p></li></ul></li><li><p><strong>HMR的原理</strong></p><ul><li><p>那么HMR的原理是什么呢？如何可以做到只更新一个模块中的内容呢？</p><ul><li>webpack-dev-server会创建两个服务：<strong>提供静态资源的服务（express）和Socket服务（net.Socket）</strong></li><li>express server负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析）</li></ul></li><li><p>HMR Socket Server，是一个socket的长连接</p><ul><li>长连接有一个最好的好处是建立连接后<strong>双方可以通信</strong>（服务器可以直接发送文件到客户端）</li><li><strong>当服务器监听到对应的模块发生变化时，会生成两个文件.json（manifest文件）和.js文件（update chunk）</strong></li><li>通过长连接，可以直接<strong>将这两个文件主动发送给客户端</strong>（浏览器）</li><li><strong>浏览器拿到两个新的文件后，通过HMR runtime机制，加载这两个文件，并且针对修改的模块进行更新</strong></li></ul></li></ul></li><li><p><strong>HMR的原理图</strong></p></li></ul><p><img src="'+d+`" alt="image-20220113165406860"></p><h2 id="_6-devserver" tabindex="-1">6.devServer <a class="header-anchor" href="#_6-devserver" aria-hidden="true">#</a></h2><p><a href="https://webpack.docschina.org/configuration/dev-server/" target="_blank" rel="noreferrer">官方文档</a></p><h3 id="publicpath属性" tabindex="-1">publicPath属性 <a class="header-anchor" href="#publicpath属性" aria-hidden="true">#</a></h3><ul><li>devServer中有一个publicPath的属性，该属性是指定本地服务所在的文件夹</li><li>它的<strong>默认值是 /</strong>，也就是我们直接访问端口即可访问其中的资源 <code>http://localhost:8080</code>；</li><li>如果我们将其设置为了 <strong>/abc</strong>，那么我们需要通过 <code>http://localhost:8080/abc</code>才能访问到对应的打包后的资源</li><li>并且这个时候，我们其中的bundle.js通过 <code>http://localhost:8080/bundle.js</code>也是无法访问的 <ul><li>所以必须将output.publicPath也设置为 /abc；</li><li>官方其实有提到，建议 devServer.publicPath 与 output.publicPath相同</li></ul></li></ul><h3 id="contentbase属性" tabindex="-1">contentBase属性 <a class="header-anchor" href="#contentbase属性" aria-hidden="true">#</a></h3><ul><li><p>devServer中contentBase对于我们直接访问打包后的资源其实并没有太大的作用，它的主要作用是<strong>如果我们打包</strong><strong>后的资源，又依赖于其他的一些资源</strong>，那么就需要<strong>指定从哪里来查找这个内容</strong></p><ul><li>比如在index.html中，我们需要依赖一个 abc.js 文件，这个文件我们存放在 public文件 中</li><li>在index.html中，我们应该如何去引入这个文件呢？ <ul><li>比如代码是这样的：<code>&lt;script src=&quot;./public/abc.js&quot;&gt;&lt;/script&gt;</code>；</li><li>但是这样打包后浏览器是无法通过相对路径去找到这个文件夹的</li><li>所以代码是这样的：<code>&lt;script src=&quot;/abc.js&quot;&gt;&lt;/script&gt;</code>;</li><li>但是我们如何让它去查找到这个文件的存在呢？ 设置contentBase即可</li></ul></li></ul></li><li><p>当然在devServer中还有一个可以监听contentBase发生变化后重新编译的一个属性： watchContentBase</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">contentBase</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">watchContentBase</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> 		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="hotonly、host配置" tabindex="-1">hotOnly、host配置 <a class="header-anchor" href="#hotonly、host配置" aria-hidden="true">#</a></h3><ul><li><strong>hotOnly是当代码编译失败时，是否刷新整个页面</strong><ul><li>默认情况下当代码编译失败修复后，我们会重新刷新整个页面</li><li>如果不希望重新刷新整个页面，可以设置hotOnly为true</li></ul></li><li><strong>host设置主机地址</strong><ul><li>默认值是localhost；</li><li>如果希望其他地方也可以访问，可以设置为 0.0.0.0</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hotOnly</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0.0.0.0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="port、open、compress" tabindex="-1">port、open、compress <a class="header-anchor" href="#port、open、compress" aria-hidden="true">#</a></h3><ul><li><p><strong>port设置监听的端口，默认情况下是8080</strong></p></li><li><p><strong>open是否打开浏览器</strong></p><ul><li><strong>默认值是false</strong>，设置为true会打开浏览器</li><li>也可以设置为类似于 Google Chrome等值</li></ul></li><li><p><strong>compress是否为静态文件开启gzip compression</strong></p><ul><li><p><strong>默认值是false</strong>，可以设置为true</p><p><img src="`+h+`" alt="image-20220113170258629"></p></li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8081</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">open</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">compress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 为静态文件开启gzip </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="proxy代理" tabindex="-1">Proxy代理 <a class="header-anchor" href="#proxy代理" aria-hidden="true">#</a></h3><ul><li><p><strong>proxy是我们开发中非常常用的一个配置选项，它的目的设置代理来解决跨域访问的问题</strong></p><ul><li>比如我们的一个api请求是 <code>http://localhost:8888</code>，但是本地启动服务器的域名是<code>http://localhost:8000</code>，这 个时候发送网络请求就会出现跨域的问题</li><li>那么我们可以将请求先发送到一个代理服务器，代理服务器和API服务器没有跨域的问题，就可以解决我们的 跨域问题了</li></ul></li><li><p><strong>配置</strong></p><ul><li><strong>target</strong>：表示的是<strong>代理到的目标地址</strong>，比如 /api-hy/moment会被代理到 <code>http://localhost:8888/api/moment</code>；</li><li><strong>pathRewrite</strong>：默认情况下，我们的 /api-hy 也会被写入到URL中，如果希望删除，可以使用pathRewrite；</li><li><strong>secure</strong>：默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false；</li><li><strong>changeOrigin</strong>：它表示是否更新代理后请求的headers中host地址</li></ul></li><li><p><strong>changeOrigin的解析</strong></p><ul><li>通过查看源码我发现其实是要<strong>修改代理请求中的headers中的host属性</strong></li><li>因为我们真实的请求，其实是需要通过 <code>http://localhost:8888</code>来请求的</li><li>但是因为使用了代码，默认情况下它的值时 <code>http://localhost:8000</code>；</li><li>如果我们需要修改，那么可以将changeOrigin设置为true即可</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 代理单一目标 /api</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">/api</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:8888</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pathRewrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">^/api</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 不希望传递/api，则需要重写路径</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">secure</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 代理多个目标 /api + /auth </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/auth</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">secure</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="historyapifallback" tabindex="-1">historyApiFallback <a class="header-anchor" href="#historyapifallback" aria-hidden="true">#</a></h3><ul><li><strong>historyApiFallback是开发中一个非常常见的属性，它主要的作用是解决SPA页面在路由跳转之后，进行页面刷新时，返回404的错误</strong></li><li><strong>boolean值：默认是false</strong></li><li>如果<strong>设置为true</strong>，那么在刷新时，返回404错误时，会自动返回 index.html 的内容</li><li><strong>object类型的值，可以配置rewrites属性</strong><ul><li>以配置from来匹配路径，决定要跳转到哪一个页面</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//  historyApiFallback: true, // boolean形式</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">historyApiFallback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">rewrites</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/views/landing.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">subpage</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/views/subpage.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/views/404.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      ]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_7-resolve模块解析" tabindex="-1">7.resolve模块解析 <a class="header-anchor" href="#_7-resolve模块解析" aria-hidden="true">#</a></h2><p><a href="https://webpack.docschina.org/configuration/resolve/" target="_blank" rel="noreferrer">官方文档</a></p><ul><li><p><strong>resolve用于设置模块如何被解析</strong></p><ul><li>在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库</li><li><strong>resolve可以帮助webpack从每个 require/import 语句中，找到需要引入到合适的模块代码</strong></li><li>webpack 使用 enhanced-resolve 来解析文件路径</li></ul></li><li><p><strong>webpack能解析三种文件路径</strong></p><ul><li>绝对路径 <ul><li>由于已经获得文件的绝对路径，因此不需要再做进一步解析</li></ul></li><li>相对路径 <ul><li>在这种情况下，<strong>使用 import 或 require 的资源文件所处的目录</strong>，被认为是上下文目录</li><li><strong>在 import/require 中给定的相对路径，会拼接此上下文路径，来生成模块的绝对路径</strong></li></ul></li><li>模块路径 <ul><li>在 resolve.modules中指定的所有目录检索模块 <ul><li>默认值是 [&#39;node_modules&#39;]，所以默认会从node_modules中查找文件</li></ul></li><li>我们可以通过设置别名的方式来替换初识模块路径，后面解释alias的配置</li></ul></li></ul></li><li><p><strong>extensions和alias配置</strong></p><ul><li><p>extensions是解析到文件时<strong>自动添加扩展名</strong></p><ul><li>默认值是 [&#39;.wasm&#39;, &#39;.mjs&#39;, &#39;.js&#39;, &#39;.json&#39;]</li><li>所以如果我们代码中想要添加加载 .vue 或者 jsx 或者 ts 等文件时，我们必须自己写上扩展名</li></ul></li><li><p>配置别名alias</p><ul><li>特别是当我们项目的目录结构比较深的时候，或者一个文件的路径可能需要 ../../../这种路径片段</li></ul></li><li><p>我们可以给某些常见的路径起一个别名</p></li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.wasm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.mjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.jsx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">pages</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/pages</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_8-入口文件解析" tabindex="-1">8.入口文件解析 <a class="header-anchor" href="#_8-入口文件解析" aria-hidden="true">#</a></h2><ul><li><p>我们之前编写入口文件的规则是这样的：./src/index.js，但是如果我们的<strong>配置文件所在的位置变成了 config 目录</strong>， 我们是否应该变成 ../src/index.js呢？</p><ul><li>如果我们这样编写，会发现是报错的，依然要写成 ./src/index.js；</li><li>这是因为入口文件其实是和另一个属性时有关的 <strong>context</strong></li></ul></li><li><p><strong>context的作用是用于解析入口（entry point）和加载器（loader）</strong></p></li><li><p>官方说法：默认是当前路径（但是经过我测试，<strong>默认应该是webpack的启动目录</strong>）</p></li><li><p>另外推荐在配置中传入一个值</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// context是配置文件所在目录</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// context是上一个目录</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li><p>webpack基本配置（二）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// development | production | none</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 入口，也可以配置成对象形式</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devtool</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">source-map</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 控制是否生成，以及如何生成 source map</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bundle.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 文件名</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 打包后的路径, 必须是绝对路径</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.wasm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.mjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.jsx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">pages</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/pages</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 开启热更新</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0.0.0.0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置主机地址</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8081</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置端口</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">open</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自动打开浏览器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">compress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 为静态文件开启gzip</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 代理单一目标 /api</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8888</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">pathRewrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">^/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不希望传递/api，则需要重写路径</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">secure</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [] </span><span style="color:#676E95;font-style:italic;">// loader</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [] </span><span style="color:#676E95;font-style:italic;">// 插件</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 待补充...</span></span>
<span class="line"></span></code></pre></div></li></ul>`,55),v=[m];function f(_,E,k,j,x,w){return n(),l("div",null,v)}const q=s(b,[["render",f]]);export{S as __pageData,q as default};
