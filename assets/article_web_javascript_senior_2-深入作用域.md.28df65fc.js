import{_ as s,c as a,o as n,a as l}from"./app.f9ecb9d2.js";const o=""+new URL("image-20220724155439957.2c0b157a.png",import.meta.url).href,e=""+new URL("image-20220724160527196.09391579.png",import.meta.url).href,h=JSON.parse('{"title":"深入作用域","description":"","frontmatter":{},"headers":[{"level":2,"title":"全局对象Global Object(GO)","slug":"全局对象global-object-go","link":"#全局对象global-object-go","children":[]},{"level":2,"title":"执行上下文栈(调用栈)","slug":"执行上下文栈-调用栈","link":"#执行上下文栈-调用栈","children":[]},{"level":2,"title":"从例子上解释","slug":"从例子上解释","link":"#从例子上解释","children":[{"level":3,"title":"初始化过程(编译过程)","slug":"初始化过程-编译过程","link":"#初始化过程-编译过程","children":[]},{"level":3,"title":"执行过程","slug":"执行过程","link":"#执行过程","children":[]}]}],"relativePath":"article/web/javascript/senior/2-深入作用域.md"}'),p={name:"article/web/javascript/senior/2-深入作用域.md"},t=l(`<h1 id="深入作用域" tabindex="-1">深入作用域 <a class="header-anchor" href="#深入作用域" aria-hidden="true">#</a></h1><h2 id="全局对象global-object-go" tabindex="-1"><strong>全局对象Global Object(GO)</strong> <a class="header-anchor" href="#全局对象global-object-go" aria-hidden="true">#</a></h2><p>js引擎会在执行代码之前，会在堆内存中创建一个全局对象:Global Object(GO)</p><ul><li><p>该对象 所有的作用域(scope)都可以访问</p></li><li><p>里面会包含Date、Array、String、Number、setTimeout、setInterval等等</p></li><li><p>其中还有一个window属性指向自己</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">GlobalObject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">window</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">GlobalObject</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">string类</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">setTimeout</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 等等</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="执行上下文栈-调用栈" tabindex="-1"><strong>执行上下文栈(调用栈)</strong> <a class="header-anchor" href="#执行上下文栈-调用栈" aria-hidden="true">#</a></h2><p>js引擎内部有一个<strong>执行上下文栈(Execution Context Stack，简称ECS)</strong>，它是用于执行<strong>代码的调用栈</strong></p><p>那么现在它要执行谁呢?执行的是<strong>全局的代码块</strong></p><ul><li>全局的代码块为了执行会构建一个 <strong>Global Execution Context(GEC) 全局执行上下文</strong></li><li>GEC会 被放入到ECS中 执行</li></ul><p><strong>GEC被放入到ECS中里面包含两部分内容</strong></p><ul><li>第一部分:在代码执行前，在parser转成AST的过程中，会将全局定义的变量、函数等加入到GlobalObject中，但是并不会赋值 ( 这个过程也称之为变量的作用域提升)</li><li>第二部分:在代码执行中，对变量赋值，或者执行其他的函数</li></ul><h2 id="从例子上解释" tabindex="-1"><strong>从例子上解释</strong> <a class="header-anchor" href="#从例子上解释" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vvv</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> num2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="初始化过程-编译过程" tabindex="-1"><strong>初始化过程(编译过程)</strong> <a class="header-anchor" href="#初始化过程-编译过程" aria-hidden="true">#</a></h3><p><img src="`+o+'" alt="image-20220724155439957"></p><p>在编译的过程中,一开始先会创建<code>GO全局对象</code>,并且把定义的变量全部设置为<code>undefined</code>, 然后函数会指向一个地址, 这个地址会包含函数的<code>父级作用域</code>还有函数体</p><h3 id="执行过程" tabindex="-1"><strong>执行过程</strong> <a class="header-anchor" href="#执行过程" aria-hidden="true">#</a></h3><p><img src="'+e+'" alt="image-20220724160527196"></p><p>在执行的过程中, 先将<code>全局执行上下文</code>压入<code>执行栈</code>中, 在遇到函数执行后, 会创建一个函数执行上下文, 然后在压入到栈中, 开始执行代码, 函数上下文中的</p><p><code>VO(变量对象)</code>是函数体内的变量, 也称<code>AO(活动对象)</code></p>',20),r=[t];function c(i,F,y,D,d,C){return n(),a("div",null,r)}const A=s(p,[["render",c]]);export{h as __pageData,A as default};
