import{_ as t,c as o,o as e,N as r}from"./chunks/framework.5b6ea098.js";const a="/blog/assets/image-20220901110730577.df69aeb6.png",n="/blog/assets/image-20220902103833764.cdb8f72f.png",b=JSON.parse('{"title":"9.2-学习http(二)","description":"","frontmatter":{},"headers":[],"relativePath":"article/daily-study/2022/september/9.2-学习http(二).md"}'),s={name:"article/daily-study/2022/september/9.2-学习http(二).md"},l=r('<h1 id="_9-2-学习http-二" tabindex="-1">9.2-学习http(二) <a class="header-anchor" href="#_9-2-学习http-二" aria-label="Permalink to &quot;9.2-学习http(二)&quot;">​</a></h1><h2 id="与http相关的各种概念-上" tabindex="-1">与HTTP相关的各种概念(上) <a class="header-anchor" href="#与http相关的各种概念-上" aria-label="Permalink to &quot;与HTTP相关的各种概念(上)&quot;">​</a></h2><h3 id="浏览器" tabindex="-1"><strong>浏览器</strong> <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;**浏览器**&quot;">​</a></h3><p>浏览器的正式名字叫<strong>Web Browser</strong>，顾名思义，就是检索、查看互联网上网页资源的 应用程序，名字里的 Web，实际上指的就是World Wide Web，也就是万维网。</p><p>浏览器本质上是一个 HTTP 协议中的<strong>请求方</strong>，使用 HTTP 协议获取网络上的各种资源。当 然，为了让我们更好地检索查看网页，它还集成了很多额外的功能。</p><p>例如，HTML 排版引擎用来展示页面，JavaScript 引擎用来实现动态化效果，甚至还有开 发者工具用来调试网页，以及五花八门的各种插件和扩展。</p><p>在 HTTP 协议里，浏览器的角色被称为User Agent即用户代理，意思是作为访问 者的代理来发起 HTTP 请求。不过在不引起混淆的情况下，我们通常都简单地称之 为客户端。</p><h3 id="web服务器" tabindex="-1"><strong>Web</strong>服务器 <a class="header-anchor" href="#web服务器" aria-label="Permalink to &quot;**Web**服务器&quot;">​</a></h3><p>协议另一端的<strong>应答方</strong>(响应方)是<strong>服务器</strong>，<strong>Web Server</strong>。</p><p><strong>Web 服务器:</strong></p><ul><li>Apache(老牌的服务器)</li><li>Nginx 是 Web 服务器里的后起之秀，特点是高性能、高稳定，且易于扩展。</li><li>还有 Windows 上的 IIS、Java 的 Jetty/Tomcat 等，因为性能不是很高，所以在互 联网上应用得较少。</li></ul><h3 id="cdn" tabindex="-1"><strong>CDN</strong> <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;**CDN**&quot;">​</a></h3><p><strong>CDN</strong>，全称是Content Delivery Network，翻译过来就是内容分发网络。它应用 了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。</p><p><strong>CDN的好处:</strong></p><ul><li>可以<code>缓存源站的数据</code>,让浏览器的请求不用千里迢迢地到达源站服务器， 直接在半路就可以获取响应。如果 CDN 的调度算法很优秀，更可以找到离用户最近的 节点，大幅度缩短响应时间。</li><li>除了基本的网络加速外，还提供负载均衡、 安全防护、边缘计算、跨运营商网络等功能，能够成倍地放大源站服务器的服务能力</li></ul><h3 id="爬虫" tabindex="-1"><strong>爬虫</strong> <a class="header-anchor" href="#爬虫" aria-label="Permalink to &quot;**爬虫**&quot;">​</a></h3><p>前面说到过浏览器，它是一种用户代理，代替我们访问互联网。</p><p>HTTP 协议并没有规定用户代理后面必须是真正的人类，它也完全可以是机器人，这些机器人的正式名称就叫做<strong>爬虫</strong>(Crawler)，实际上是一种可以自动访 问 Web 资源的应用程序。</p><p><strong>爬虫是怎么来的呢?</strong></p><ul><li>绝大多数是由各大搜索引擎放出来的，抓取网页存入庞大的数据库，再建立关键字索引，这样我们才能够在搜索引擎中快速地搜索到互联网角落里的页面。</li><li>爬虫也有不好的一面，它会<code>过度消耗网络资源，占用服务器和带宽，影响网站对真实数据的 分析</code>，甚至<code>导致敏感信息泄漏</code>。</li><li>所以，又<code>出现了反爬虫技术</code>，通过各种手段来限制爬 虫。其中一项就是君子协定robots.txt，约定哪些该爬，哪些不该爬。</li></ul><p>无论是爬虫还是反爬虫，用到的基本技术都是两个，一个是 HTTP，另一个就是 HTML。</p><p><strong>ps:</strong> 在浏览某些网站时遇到要求<code>验证你不是机器人</code>的页面, 这其实就是一种<code>反爬虫</code>的手段</p><h3 id="waf" tabindex="-1"><strong>WAF</strong> <a class="header-anchor" href="#waf" aria-label="Permalink to &quot;**WAF**&quot;">​</a></h3><p><strong>WAF</strong>是近几年比较火的一个词，意思是网络应用防火墙。与硬件防火墙类 似，它是应用层面的防火墙，专门检测 HTTP 流量，是防护 Web 应用的安全技术。</p><p>WAF 通常位于 Web 服务器之前，可以<code>阻止如 SQL 注入、跨站脚本等攻击</code>，目前应用较多的一个开源项目是 ModSecurity，它能够完全集成进 Apache 或 Nginx。</p><h2 id="与http相关的各种概念-下" tabindex="-1">与HTTP相关的各种概念(下) <a class="header-anchor" href="#与http相关的各种概念-下" aria-label="Permalink to &quot;与HTTP相关的各种概念(下)&quot;">​</a></h2><h3 id="tcp-ip" tabindex="-1"><strong>TCP/IP</strong> <a class="header-anchor" href="#tcp-ip" aria-label="Permalink to &quot;**TCP/IP**&quot;">​</a></h3><p>TCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是<strong>TCP</strong>和<strong>IP</strong>，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。</p><p><code>IP 协议</code></p><p><strong>IP 协议</strong>是<strong>I</strong>nternet <strong>P</strong>rotocol的缩写，主要目的是解决<code>寻址和路由问题</code>，以及如何在两点间传送数据包。IP 协议使用<strong>IP 地址</strong>的概念来定位互联网上的每一台计算机。</p><p>现在我们使用的 IP 协议大多数是 v4 版，地址是四个用.分隔的数字，例 如192.168.0.1，总共有 2^32，大约 42 亿个可以分配的地址。看上去好像很多，但互 联网的快速发展让地址的分配管理很快就捉襟见肘。所以，就又出现了 v6 版，使用 8 组:分隔的数字作为地址，容量扩大了很多，有 2^128 个，在未来的几十年里应该是足够用了</p><p><code>TCP 协议</code></p><p><strong>TCP 协议</strong>是<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol的缩写，意思是传输控制协议，它位 于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的 基础。</p><p>可靠是指保证数据不丢失，字节流是指保证数据完整，所以在 TCP 协议的两端可 以如同操作文件一样访问传输的数据，就像是读写在一个密闭的管道里流动的字节。</p><p>HTTP 是一个&quot;传输协议&quot;，但它不关心寻址、路由、数据完整性等 传输细节，而要求这些工作都由下层来处理。因为互联网上最流行的是 TCP/IP 协议，而它 刚好满足 HTTP 的要求，所以互联网上的 HTTP 协议就运行在了 TCP/IP 上，HTTP 也就可 以更准确地称为<strong>HTTP over TCP/IP</strong>(<code>TCP/IP上的HTTP</code>)</p><h3 id="dns" tabindex="-1"><strong>DNS</strong> <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;**DNS**&quot;">​</a></h3><p>因为在TCP/IP 协议中使用 IP 地址来标识计算机,难以记忆与输入, 于是<strong>域名系统</strong>(<strong>Domain Name System</strong>)出现了</p><p>在 DNS 中，域名(Domain Name)又称为主机名(Host)</p><p>域名用<code>.</code>分隔成多个单词，级别从左到右逐级升高，最右边的被称为顶级域名。</p><p><strong>域名解析:</strong> 用<code>域名映射真实IP</code>,因为如果要使用 TCP/IP 协议来通信仍然要使用IP地址</p><h3 id="uri-url" tabindex="-1"><strong>URI/URL</strong> <a class="header-anchor" href="#uri-url" aria-label="Permalink to &quot;**URI/URL**&quot;">​</a></h3><p>有了TCP/IP 和 DNS, 我们还不能任意访问网络上的资源</p><p>DNS 和 IP 地址只是标记了互联网上的主机，但主机上有那么多文本、图片、页面到底要找哪一个呢?</p><p>于是就出现了 URI(<strong>Uniform Resource Identifier</strong>)，中文名称是 <strong>统一资源标识符</strong>，使用它就能够唯一地标记互联网上资源</p><p>URI 另一个更常用的表现形式是 URL**(Uniform Resource Locator**)， <strong>统一资源定位符</strong>，也就是我们俗称的<code>网址</code>，它实际上是 URI 的一个子集，不过因为这两者几乎是相同的，差异不大，所以通常不会做严格的区分。</p><p>拿 Nginx 网站来举例，看一下 URI 是什么样子的</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">http://nginx.org/en/download.html</span></span></code></pre></div><p>可以看到，URI 主要有三个基本的部分构成(<strong>协议名 + 主机名 + 路径</strong>):</p><ul><li>协议名:即访问该资源应当使用的协议，在这里是http</li><li>主机名:即互联网上主机的标记，可以是域名或 IP 地址，在这里是nginx.org</li><li>路径:即资源在主机上的位置，使用/分隔多级目录，在这里是/en/download.html</li></ul><h3 id="https" tabindex="-1"><strong>HTTPS</strong> <a class="header-anchor" href="#https" aria-label="Permalink to &quot;**HTTPS**&quot;">​</a></h3><p>HTTPS是<code>运行在SSL/TLS 协议上的 HTTP</code>(<strong>HTTP over SSL/TLS</strong>)</p><p>注意它的名字，这里是 SSL/TLS，而不是 TCP/IP，它是一个负责加密通信的安全协议，建 立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层。</p><p>SSL 的全称是<strong>Secure Socket Layer</strong>，由网景公司发明，当发展到 3.0 时被标准化，改 名为 TLS，即<strong>Transport Layer Security</strong>，但由于历史的原因还是有很多人称之为 SSL/TLS，或者直接简称为 SSL。</p><p>SSL 使用了许多密码学最先进的研究成果，综合了<code>对称加密</code>、<code>非对称加密</code>、<code>摘要算法</code>、<code>数字签名</code>、<code>数字证书</code>等技术，能够在不安全的环境中为通信的双方创建出一个秘密的、安全的传输通道，为 HTTP 套上一副坚固的盔甲</p><h3 id="代理" tabindex="-1"><strong>代理</strong> <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;**代理**&quot;">​</a></h3><p>代理(Proxy)是 HTTP 协议中请求方和应答方中间的一个环节，作为中转站，既可以 转发客户端的请求，也可以转发服务器的应答。</p><p><strong>代理有很多的种类，常见的有:</strong></p><ul><li>匿名代理:完全隐匿了被代理的机器，外界看到的只是代理服务器</li><li>透明代理:顾名思义，它在传输过程中是透明开放的，外界既知道代理，也知道客户端</li><li>正向代理:靠近客户端，代表客户端向服务器发送请求</li><li>反向代理:靠近服务器端，代表服务器响应客户端的请求</li></ul><p>由于代理在传输过程中插入了一个中间层，所以可以在这个环节做很多有意思的事情，比如:</p><ul><li>负载均衡:把访问请求均匀分散到多台机器，实现访问集群化</li><li>内容缓存:暂存上下行的数据，减轻后端的压力</li><li>安全防护:隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器</li><li>数据处理:提供压缩、加密等额外的功能</li></ul><h2 id="相关图" tabindex="-1">相关图 <a class="header-anchor" href="#相关图" aria-label="Permalink to &quot;相关图&quot;">​</a></h2><img src="'+a+'" alt="image-20220901110730577" style="zoom:70%;"><p><strong>与HTTP相关的各种概念(上)</strong></p><p><img src="'+n+'" alt="image-20220902103833764"></p><p><strong>与HTTP相关的各种概念(下)</strong></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://time.geekbang.org/column/intro/100029001" target="_blank" rel="noreferrer">透视HTTP协议(罗剑锋)</a></p>',67),i=[l];function p(c,d,g,h,P,T){return e(),o("div",null,i)}const m=t(s,[["render",p]]);export{b as __pageData,m as default};
