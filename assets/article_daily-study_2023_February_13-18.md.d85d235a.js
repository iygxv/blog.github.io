import{_ as s,c as l,o as a,N as n}from"./chunks/framework.7288ae32.js";const o="/blog_static/assets/2-19-1.52d10bba.png",d=JSON.parse('{"title":"2023/2/13 - 2023/2/18","description":"","frontmatter":{},"headers":[],"relativePath":"article/daily-study/2023/February/13-18.md"}'),p={name:"article/daily-study/2023/February/13-18.md"},e=n(`<h1 id="_2023-2-13-2023-2-18" tabindex="-1">2023/2/13 - 2023/2/18 <a class="header-anchor" href="#_2023-2-13-2023-2-18" aria-label="Permalink to &quot;2023/2/13 - 2023/2/18&quot;">​</a></h1><h2 id="_2023-2-13" tabindex="-1">2023/2/13 <a class="header-anchor" href="#_2023-2-13" aria-label="Permalink to &quot;2023/2/13&quot;">​</a></h2><ul><li>继续学习webpack</li></ul><h3 id="闲暇之余" tabindex="-1">闲暇之余 <a class="header-anchor" href="#闲暇之余" aria-label="Permalink to &quot;闲暇之余&quot;">​</a></h3><ul><li><p>for...in 和 for...of 的区别？</p><ul><li>for··of 遍历获取的是对象的键值，for··in 获取的是对象的键名</li><li>for··· in 会遍历对象的整个原型链，性能非常差不推荐使用，而for···of 只遍历当前对象不会遍历原型链</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gx</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> a)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">in--- </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// in--- name</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// in--- age</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// in--- test</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(a))</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">of--- </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// in--- name</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// in--- age</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>对于数组的遍历，for···in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for···of 只返回数组的下标对应的属性值</p></li></ul><p><strong>总结:</strong></p><p>for...in循环主要是为了遍历对象而生，不适用于遍历数组;</p><p>for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p><ul><li><p>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</p></li><li><p><strong>constructor</strong>判断类型的问题，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了，例如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">B</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> A) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> A)  </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> B)  </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div></li><li><p><strong>Object.prototype.toString.call()</strong> 为什么需要call</p><p>因为toString方法在对象上才能用来判断类型,也就是</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;[object Object]&#39;</span></span></code></pre></div><p>但是在Array、function等<strong>类型作为Object的实例，都重写了toString方法</strong>， 因此，无法用于判断类型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">c</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;function c() {}&#39;</span></span></code></pre></div><p>因此需要通过call来改变this的执行， 使之指向<code>Object</code></p></li><li><p>typeof null 的结果为什么是<code>object</code>？</p><p>在计算机中，object的类型标签是<code>000</code>, 而null的类型标签全是0， 因此typeof null 是object</p></li></ul><h2 id="_2023-2-14" tabindex="-1">2023/2/14 <a class="header-anchor" href="#_2023-2-14" aria-label="Permalink to &quot;2023/2/14&quot;">​</a></h2><ul><li><p>webpack基本的学习</p><p><a href="https://codevity.top/article/web/engineered/webpack/1-webpack%E5%AD%A6%E4%B9%A0%E4%B8%80.html" target="_blank" rel="noreferrer">webpack基本的学习一</a></p><p><a href="https://codevity.top/article/web/engineered/webpack/2-webpack%E5%AD%A6%E4%B9%A0%E4%BA%8C.html" target="_blank" rel="noreferrer">webpack基本的学习二</a></p><p><a href="https://codevity.top/article/web/engineered/webpack/3-webpack%E5%AD%A6%E4%B9%A0%E4%B8%89.html" target="_blank" rel="noreferrer">webpack基本的学习三</a></p></li></ul><h3 id="闲暇之余-1" tabindex="-1">闲暇之余 <a class="header-anchor" href="#闲暇之余-1" aria-label="Permalink to &quot;闲暇之余&quot;">​</a></h3><ul><li><p>如果函数多个参数,且有一些参数默认, 我们可以创建一个上下文</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createContext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">回调函数调用</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 其他...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>startsWith 与 endsWith</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// startsWith：判断字符串是否以某个/某串字符开头</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gx vvvv</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vvvv</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// endsWith：判断字符串是否以某个/某串字符结尾</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gx vvvv</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vvvv</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div></li><li><p>正则匹配 （exec 和 test）</p><ul><li><p>exec</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noreferrer">MDN描述</a></p><p><strong><code>exec()</code></strong> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null" target="_blank" rel="noreferrer"><code>null</code></a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 例如匹配空格/换行之类的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> match </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;"> \\t\\r\\n</span><span style="color:#89DDFF;">]+/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;">(str)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match) </span><span style="color:#676E95;font-style:italic;">// 返回一个结果数组或null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;    &#39;, index: 0, input: &#39;    &#39;, groups: undefined]</span></span></code></pre></div></li><li><p>test</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" rel="noreferrer">MDN描述</a></p><p><strong><code>test()</code></strong> 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 <code>true</code> 或 <code>false</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 例如匹配空格/换行之类的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> match </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;"> \\t\\r\\n</span><span style="color:#89DDFF;">]+/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(str)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(match) </span><span style="color:#676E95;font-style:italic;">// 返回 true 或 false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div></li></ul></li><li><p>JavaScript脚本延迟加载的方式</p><ul><li><strong>defer 属性</strong> 脚本同步加载， 但是会等待文档（dom）后再触发，不会阻塞页面</li><li><strong>async 属性</strong> 脚本异步加载，加载完毕后会立即触发， 如果文档（dom）还没加载完，也是会阻塞页面解析</li><li><strong>动态创建 DOM 方式</strong></li><li><strong>使用 setTimeout 延迟方法</strong> （脚本放入定时器里面）</li><li><strong>让 JS 最后加载</strong> (放置底部)</li></ul></li><li><p>什么是尾调用，使用尾调用有什么好处？</p><p>尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p></li><li><p><strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？</p><p><a href="https://www.yuque.com/u25152297/gu/azet2gi8kkboh7gq#By1iO" target="_blank" rel="noreferrer"><strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？</a></p><ul><li><strong>CommonJS是同步加载， 而ES6模块是异步加载</strong></li><li><strong>CommonJS是运行时加载，</strong> <strong>而ES6模块是编译时加载</strong></li><li><strong>CommonJS是对模块的浅拷贝，ES6 Module是对模块的引入，即ES6 Module只存只读，不能改变其值</strong></li><li><strong>CommonJS使用了缓存模块来解决死循环，而ES Module对模块进行标注, 已经标注过的模块则不会再次进入</strong></li></ul><p><strong>四个方面：</strong></p><ul><li><strong>什么时候加载</strong></li><li><strong>同步还是异步加载</strong></li><li><strong>对模块的处理</strong></li><li><strong>缓存</strong></li></ul></li><li><p>合并（git meger） 和 变基（git rebase）区别</p><ul><li>合并 会增加一个commit， 而变基不会</li><li>如果进行多次相同操作，可以选择变基， 否则选择合并</li></ul></li></ul><h2 id="_2023-2-15" tabindex="-1">2023/2/15 <a class="header-anchor" href="#_2023-2-15" aria-label="Permalink to &quot;2023/2/15&quot;">​</a></h2><ul><li>创建项目使用一下webpack</li></ul><h3 id="闲暇之余-2" tabindex="-1">闲暇之余 <a class="header-anchor" href="#闲暇之余-2" aria-label="Permalink to &quot;闲暇之余&quot;">​</a></h3><ul><li><p>弄了一下自动化部署(服务器不行, 无法自动化部署)</p></li><li><p>学习正则</p><ul><li><p>{m, n} 表示连续出现最少 m 次，最多 n 次</p></li><li><p>[abc] 表示该字符是可以字符 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 中的任何一个, []里面的^代表非</p></li><li><p>字符组</p><table><thead><tr><th>字符组</th><th>具体含义</th></tr></thead><tbody><tr><td>\\d</td><td>[0-9]表示是一位数字，digit数字。</td></tr><tr><td>\\D</td><td>[^0-9]表示除数字以外的任意字符。</td></tr><tr><td>\\w</td><td>[0-9a-zA-Z_]表示数字，大小写字母和下划线，word简写，又称单词字符。</td></tr><tr><td>\\W</td><td>^0-9a-zA-Z_]，非单词字符。</td></tr><tr><td>\\s</td><td>[ \\t\\v\\n\\r\\f]表示空白符。包含空格，水平制表符，垂直制表符，换行符，回车符，换页符。</td></tr><tr><td>\\S</td><td>[^ \\t\\v\\n\\r\\f]，非空白符。</td></tr><tr><td>.</td><td>[^\\n\\r\\u2028\\u2029]，通配符，表示除了换行符，回车符，行分隔符和段分隔符之外任意字符。</td></tr></tbody></table></li><li><p>匹配数组千分位隔符表示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/(?!</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">)(?=(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3})+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">g</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123456789</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(regex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><strong>解释</strong></p><ul><li>^ 代表匹配开头， ?! 代表不匹配，所以(?!^) 代表不匹配开头</li><li>?= 代表匹配 \\d{3} 匹配三个数字 + 代表至少匹配一个，所以(?=(\\d{3})+$) 代表从最后开始 至少匹配一次三个数字</li></ul></li></ul></li></ul><h2 id="_2023-2-16" tabindex="-1">2023/2/16 <a class="header-anchor" href="#_2023-2-16" aria-label="Permalink to &quot;2023/2/16&quot;">​</a></h2><ul><li><p>写了一个loader</p><p><a href="https://www.webpackjs.com/contribute/writing-a-loader/" target="_blank" rel="noreferrer">如何编写一个loader</a></p></li><li><p>写了一个plugin</p><p><a href="https://www.webpackjs.com/contribute/writing-a-plugin/" target="_blank" rel="noreferrer">如何编写一个plugin</a></p></li></ul><h3 id="闲暇之余-3" tabindex="-1">闲暇之余 <a class="header-anchor" href="#闲暇之余-3" aria-label="Permalink to &quot;闲暇之余&quot;">​</a></h3><ul><li><p>浏览器相关</p><ul><li><p>①XSS（<strong>跨站脚本攻击</strong>） - 攻击者通过在网站<code>注入恶意脚本</code>，使之在用户的浏览器上运行， 从而盗取用户的信息（如：cookie）</p><p><strong>如何防御XSS攻击？</strong></p><ul><li>对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作</li><li>对需要插入到 HTML 中的代码做好充分的转义（纯前端）</li><li>使用 CSP（内容安全策略） ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</li></ul></li><li><p>②CSRF（<strong>跨站请求伪造攻击</strong>） - 诱导用户进入一个第三方网站，获取用户的登录状态，然后冒充用户去向服务器执行一些操作</p><p><strong>如何防御CSRF攻击？</strong></p><ul><li>在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用</li><li>进行同源检测</li><li>对Cookie 进行双重验证</li><li>使用 CSRF Token 进行验证</li></ul></li><li><p>③<strong>浏览器缓存的全过程</strong>：</p><ul><li>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</li><li>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</li><li>如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</li><li>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</li><li>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；</li><li><img src="`+o+'" alt="2-19-1"></li></ul></li><li><p>④资源缓存的位置一共有 3 种，按优先级从高到低分别是：</p><ul><li><strong>Service Worker</strong>：Service Worker 运行在 JavaScript 主线程之外，虽然由于脱离了浏览器窗体无法直接访问 DOM，但是它可以完成离线缓存、消息推送、网络代理等功能。它可以让我们<strong>自由控制</strong>缓存哪些文件、如何匹配缓存、如何读取缓存，并且<strong>缓存是持续性的</strong>。当 Service Worker 没有命中缓存的时候，需要去调用 <code>fetch</code> 函数获取 数据。也就是说，如果没有在 Service Worker 命中缓存，会根据缓存查找优先级去查找数据。但是不管是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示是从 Service Worker 中获取的内容。</li><li><strong>Memory Cache</strong>：Memory Cache 就是内存缓存，它的效率最快，<strong>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放</strong>。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</li><li><strong>Disk Cache</strong>：Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache <strong>胜在容量和存储时效性上</strong>。在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</li></ul><p><strong>Disk Cache</strong>：Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。其具有以下特点：</p><ul><li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li><li>可以推送 <code>no-cache</code> 和 <code>no-store</code> 的资源</li><li>一旦连接被关闭，Push Cache 就被释放</li><li>多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存</li><li>Push Cache 中的缓存只能被使用一次</li><li>浏览器可以拒绝接受已经存在的资源推送</li><li>可以给其他域名推送资源</li></ul></li><li><p>⑤点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？</p><ul><li><strong>点击刷新按钮或者按 F5</strong>：浏览器直接对本地的缓存文件过期，但是会带上If-Modifed-Since，If-None-Match，这就意味着服务器会对文件检查新鲜度，返回结果可能是 304，也有可能是 200。</li><li><strong>用户按 Ctrl+F5（强制刷新）</strong>：浏览器不仅会对本地文件过期，而且不会带上 If-Modifed-Since，If-None-Match，相当于之前从来没有请求过，返回结果是 200。</li><li>地址栏回车： 浏览器发起请求，按照正常流程，本地检查是否过期，然后服务器检查新鲜度，最后返回内容。</li></ul></li><li><p>⑥浏览器内核主要分成两部分：</p><ul><li><strong>渲染引擎</strong>的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。</li><li><strong>JS 引擎</strong>：解析和执行 javascript 来实现网页的动态效果。</li></ul></li></ul></li></ul><h2 id="_2023-2-17" tabindex="-1">2023/2/17 <a class="header-anchor" href="#_2023-2-17" aria-label="Permalink to &quot;2023/2/17&quot;">​</a></h2><ul><li>了解了下拖拽排序的大概原理</li></ul><h2 id="_2023-2-18" tabindex="-1">2023/2/18 <a class="header-anchor" href="#_2023-2-18" aria-label="Permalink to &quot;2023/2/18&quot;">​</a></h2><ul><li>无</li></ul><h2 id="_2023-2-19" tabindex="-1">2023/2/19 <a class="header-anchor" href="#_2023-2-19" aria-label="Permalink to &quot;2023/2/19&quot;">​</a></h2><ul><li>无</li></ul>',27),t=[e];function r(c,i,y,D,F,A){return a(),l("div",null,t)}const g=s(p,[["render",r]]);export{d as __pageData,g as default};
