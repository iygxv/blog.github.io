import{_ as t,c as e,o as r,a as o}from"./app.472a3350.js";const _=JSON.parse('{"title":"9.7-学习http(五)","description":"","frontmatter":{},"headers":[{"level":2,"title":"状态码","slug":"状态码","link":"#状态码","children":[{"level":3,"title":"比较常见的状态码","slug":"比较常见的状态码","link":"#比较常见的状态码","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"article/daily-study/2022/september/9.7-学习http(五).md"}'),n={name:"article/daily-study/2022/september/9.7-学习http(五).md"},l=o('<h1 id="_9-7-学习http-五" tabindex="-1">9.7-学习http(五) <a class="header-anchor" href="#_9-7-学习http-五" aria-hidden="true">#</a></h1><h2 id="状态码" tabindex="-1"><strong>状态码</strong> <a class="header-anchor" href="#状态码" aria-hidden="true">#</a></h2><p><strong>状态码</strong>的实际可用范围: <code>100~599</code></p><p>这五类的具体含义是:</p><ul><li>1××:提示信息，表示目前是协议处理的中间状态，还需要后续的操作</li><li>2××:成功，报文已经收到并被正确处理</li><li>3××:重定向，资源位置发生变动，需要客户端重新发送请求</li><li>4××:客户端错误，请求报文有误，服务器无法处理</li><li>5××:服务器错误，服务器在处理请求时内部发生了错误</li></ul><h3 id="比较常见的状态码" tabindex="-1"><strong>比较常见的状态码</strong> <a class="header-anchor" href="#比较常见的状态码" aria-hidden="true">#</a></h3><p><strong>1××</strong></p><p>1××类状态码属于提示信息，是协议处理的中间状态，实际能够用到的时候很少。</p><p><strong>2××</strong></p><p>2××类状态码表示服务器收到并成功处理了客户端的请求， 这也是客户端最愿意看到的状态码。</p><ul><li><p><strong>200 OK</strong>是最常见的成功状态码，表示一切正常，服务器如客户端所期望的那样返回了处理结果，如果是非 HEAD 请求，通常在响应头后都会有 body 数据。</p></li><li><p><strong>204 No Content</strong>是另一个很常见的成功状态码，它的 含义与200 OK基本相同，但响应头后没有 body 数据。所以对于 Web 服务器来说，正确地区分 200 和 204 是很必要的。</p></li><li><p><strong>206 Partial Content</strong>是 HTTP 分块下载或断点续传的基础，在客户端发送范围请求、要求获取资源的部分数据时出现，它与200 一样，也是服务器成功处理了请求， 但 body 里的数据不是资源的全部，而是其中的一部分。</p><p>状态码 206 通常还会伴随着头字段<strong>Content-Range</strong>， 表示响应报文里 body 数据的具体范围，供客户端确认，例如Content-Range: bytes 0-99/2000，意思是此次获取的是总计 2000 个字节的前 100 个字节。</p></li></ul><p><strong>3××</strong></p><p>3××类状态码表示客户端请求的资源发生了变动，客户端必须用新的 URI 重新发送请求获取资源，也就是通常所说的重定向，包括著名的 301、302 跳转。</p><ul><li><p><strong>301 Moved Permanently</strong>俗称永久重定向，含义是此次请求的资源已经不存在了，需要改用改用新的 URI 再次访问。</p></li><li><p>与它类似的是<strong>302 Found</strong>，曾经的描述短语是<strong>Moved Temporarily</strong>，俗称临时重定向，意思是请求的资源还在，但需要暂时用另一个 URI 来访问。</p><p>(301 和 302 都会在响应头里使用字段<strong>Location</strong>指明后续要 跳转的 URI，最终的效果很相似，浏览器都会重定向到新的 URI。两者的根本区别在于语义，一个是永久，一个 是临时，所以在场景、用法上差距很大。)</p></li><li><p><strong>304 Not Modified</strong> 是一个比较有意思的状态码，它用于 If-Modified-Since 等条件请求，表示资源未修改，用于缓存控制。它不具有通常的跳转含义，但可以理解成重定 向已到缓存的文件(即缓存重定向)。</p></li></ul><p><strong>4××</strong></p><p>4××类状态码表示客户端发送的请求报文有误，服务器无法处理，它就是真正的错误码含义了。</p><ul><li><strong>400 Bad Request</strong>是一个通用的错误码，表示请求报 文有错误，但具体是数据格式错误、缺少请求头还是 URI 超长它没有明确说，只是一个笼统的错误，客户端看到 400 只会是一头雾水不知所措。</li><li><strong>403 Forbidden</strong>实际上不是客户端的请求出错，而是 表示服务器禁止访问资源。原因可能多种多样，例如信息敏感、法律禁止等，如果服务器友好一点，可以在 body 里详细说明拒绝请求的原因。</li><li><strong>404 Not Found</strong>可能是我们最常看见也是最不愿意看到的一个状态码，它的原意是资源在本服务器上未找到，所以无法提供给客户端。</li></ul><p>4××里剩下的一些代码较明确地说明了错误的原因，都很好理解，开发中常用的有:</p><ul><li><p><strong>405 Method Not Allowed</strong>:不允许使用某些方法操作资 源，例如不允许 POST 只能 GET。</p></li><li><p><strong>406 Not Acceptable</strong>:资源无法满足客户端请求的条件，例如请求中文但只有英文。</p></li><li><p><strong>408 Request Timeout</strong>:请求超时，服务器等待了过长时间。</p></li><li><p><strong>409 Conflict:多个请求发生了冲突</strong>，可以理解为多线程 并发时的竞态。</p></li><li><p><strong>413 Request Entity Too Large</strong>:请求报文里的 body 太大。</p></li><li><p><strong>414 Request-URI Too Long</strong>:请求行里的 URI 太大。</p></li><li><p><strong>429 Too Many Requests</strong>:客户端发送了太多的请求， 通常是由于服务器的限连策略。</p></li><li><p><strong>431 Request Header Fields Too Large</strong>:请求头某个字 段或总体太大。</p></li></ul><p><strong>5××</strong></p><p>5××类状态码表示客户端请求报文正确，但服务器在处理时内部发生了错误，无法返回应有的响应数据，是服务器端的错误码。</p><p><strong>500 Internal Server Error</strong>与 400 类似，也是一个通 用的错误码，服务器究竟发生了什么错误我们是不知道的。</p><p><strong>501 Not Implemented</strong>表示客户端请求的功能还不支持。</p><p><strong>502 Bad Gateway</strong>通常是服务器作为网关或者代理时返回的错误码，表示服务器自身工作正常，访问后端服务器时发生了错误，但具体的错误原因也是不知道的。</p><p><strong>503 Service Unavailable</strong>表示服务器当前很忙，暂时 无法响应服务，我们上网时有时候遇到的网络服务正忙， 请稍后重试的提示信息就是状态码 503。</p><p>(503 是一个临时的状态，很可能过几秒钟后服务器就不 那么忙了，可以继续提供服务，所以 503 响应报文里通常 还会有一个<strong>Retry-After</strong>字段，指示客户端可以在多久 以后再次尝试发送请求。)</p><h3 id="小结" tabindex="-1"><strong>小结</strong> <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h3><ul><li><p>状态码在响应报文里表示了服务器对请求的处理结果</p></li><li><p>状态码后的原因短语是简单的文字描述，可以自定义</p></li><li><p>状态码是十进制的三位数，分为五类，从 100 到 599</p></li><li><p>2××类状态码表示成功，常用的有 200、204、206</p></li><li><p>3××类状态码表示重定向，常用的有 301、302、304</p></li><li><p>4××类状态码表示客户端错误，常用的有 400、403、404</p></li><li><p>5××类状态码表示服务器错误，常用的有 500、501、502、503</p></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://time.geekbang.org/column/intro/100029001" target="_blank" rel="noreferrer">透视HTTP协议(罗剑锋)</a></p>',30),i=[l];function s(p,a,g,d,h,c){return r(),e("div",null,i)}const b=t(n,[["render",s]]);export{_ as __pageData,b as default};
