import{_ as t,c as a,o as e,N as o}from"./chunks/framework.5b6ea098.js";const s="/blog/assets/image-20220921104702977.20e22d48.png",r="/blog/assets/image-20220921104745816.07d8de96.png",p="/blog/assets/image-20220921104845002.c40c1d5b.png",n="/blog/assets/image-20220921105158444.03adb2a5.png",T="/blog/assets/image-20220921105448367.9ea01663.png",l="/blog/assets/image-20220921105923463.94a2c8b8.png",S=JSON.parse('{"title":"9.21-学习http(十五)","description":"","frontmatter":{},"headers":[],"relativePath":"article/daily-study/2022/september/9.21-学习http(十五).md"}'),i={name:"article/daily-study/2022/september/9.21-学习http(十五).md"},g=o('<h1 id="_9-21-学习http-十五" tabindex="-1">9.21-学习http(十五) <a class="header-anchor" href="#_9-21-学习http-十五" aria-label="Permalink to &quot;9.21-学习http(十五)&quot;">​</a></h1><h2 id="http-2内核剖析" tabindex="-1"><strong>HTTP/2内核剖析</strong> <a class="header-anchor" href="#http-2内核剖析" aria-label="Permalink to &quot;**HTTP/2内核剖析**&quot;">​</a></h2><h3 id="连接前言" tabindex="-1"><strong>连接前言</strong> <a class="header-anchor" href="#连接前言" aria-label="Permalink to &quot;**连接前言**&quot;">​</a></h3><p>由于 HTTP/2事实上是基于 TLS，所以在正式收发数据之前，会有 TCP 握手和 TLS 握手</p><p>TLS 握手成功之后，客户端必须要发送一个<strong>连接前言</strong>(connection preface)，用来确认建立 HTTP/2 连接。</p><p>这个连接前言是标准的 HTTP/1 请求报文，使用纯文本的 ASCII 码格式，请求方法是特别注册的一个关键字PRI，全文只有 24 个字节:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n</span></span></code></pre></div><p>在 Wireshark 里，HTTP/2 的连接前言被称为<strong>Magic</strong>，意思就是不可知的魔法。</p><p>所以，就不要问为什么会是这样了，只要服务器收到这个有魔力的字符串，就知道 客户端在 TLS 上想要的是 HTTP/2 协议，而不是其他别的协议，后面就会都使用 HTTP/2 的数据格式。</p><h3 id="头部压缩" tabindex="-1"><strong>头部压缩</strong> <a class="header-anchor" href="#头部压缩" aria-label="Permalink to &quot;**头部压缩**&quot;">​</a></h3><p>确立了连接之后，HTTP/2 就开始准备请求报文。</p><p>因为语义上它与 HTTP/1 兼容，所以报文还是由Header+Body构成的，但在请求发送前，必须要用<strong>HPACK</strong>算法来压缩头部数据。</p><p>HPACK算法是专门为压缩 HTTP 头部定制的算法，与 gzip、zlib 等压缩算法不同，它是一个有状态的算法，需要客户端和服务器各自维护一份索引表，也可以说是字典(这有点类似 brotli)，压缩和解压缩就是查表和更新表的操作。</p><p>为了方便管理和压缩，HTTP/2 废除了原有的起始行概念，把起始行里面的请求方法、 URI、状态码等统一转换成了头字段的形式，并且给这些不是头字段的头字段起了个特别的名字——<strong>伪头字段</strong>(pseudo-header fields)。而起始行里的版本号和错误原因短语因为没什么大用，顺便也给废除了。</p><p>为了与真头字段区分开来，这些伪头字段会在名字前加一个:，比 如:authority :method :status，分别表示的是域名、请求方法和状态码。</p><p>现在 HTTP 报文头就简单了，全都是Key-Value形式的字段，于是 HTTP/2 就为一些最常用的头字段定义了一个只读的<strong>静态表</strong>(Static Table)。</p><p>下面的这个表格列出了静态表的一部分，这样只要查表就可以知道字段名和对应的值， 比如数字2代表GET，数字8代表状态码 200。</p><img src="'+s+'" alt="image-20220921104702977" style="zoom:50%;"><p>但如果表里只有 Key 没有 Value，或者是自定义字段根本找不到该怎么办呢?</p><p>这就要用到<strong>动态表</strong>(Dynamic Table)，它添加在静态表后面，结构相同，但会在编码解码的时候随时更新。</p><p>比如说，第一次发送请求时的user-agent字段长是一百多个字节，用哈夫曼压缩编码发送之后，客户端和服务器都更新自己的动态表，添加一个新的索引号65。那么下一 次发送的时候就不用再重复发那么多字节了，只要用一个字节发送编号就好。</p><img src="'+r+'" alt="image-20220921104745816" style="zoom:50%;"><h3 id="二进制帧" tabindex="-1"><strong>二进制帧</strong> <a class="header-anchor" href="#二进制帧" aria-label="Permalink to &quot;**二进制帧**&quot;">​</a></h3><p>头部数据压缩之后，HTTP/2 就要把报文拆成二进制的帧准备发送。</p><p>HTTP/2 的帧结构有点类似 TCP 的段或者 TLS 里的记录，但报头很小，只有 9 字节，非常地节省(可以对比一下 TCP 头，它最少是 20 个字节)。</p><p>二进制的格式也保证了不会有歧义，而且使用位运算能够非常简单高效地解析。</p><img src="'+p+'" alt="image-20220921104845002" style="zoom:50%;"><p>帧开头是 3 个字节的<strong>长度</strong>(但不包括头的 9 个字节)，默认上限是 2^14，最大是 2^24， 也就是说 HTTP/2 的帧通常不超过 16K，最大是 16M。</p><p>长度后面的一个字节是<strong>帧类型</strong>，大致可以分成<strong>数据帧</strong>和<strong>控制帧</strong>两类，HEADERS 帧和 DATA 帧属于数据帧，存放的是 HTTP 报文，而 SETTINGS、PING、PRIORITY 等则是用来管理流的控制帧。</p><p>HTTP/2 总共定义了 10 种类型的帧，但一个字节可以表示最多 256 种，所以也允许在标准之外定义其他类型实现功能扩展。这就有点像 TLS 里扩展协议的意思了，比如 Google 的 gRPC 就利用了这个特点，定义了几种自用的新帧类型。</p><p>第 5 个字节是非常重要的<strong>帧标志</strong>信息，可以保存 8 个标志位，携带简单的控制信息。常用的标志位有<strong>END_HEADERS</strong>表示头数据结束，相当于 HTTP/1 里头后的空行 (\\r\\n)，<strong>END_STREAM</strong>表示单方向数据发送结束(即 EOS，End of Stream)，相当于 HTTP/1 里 Chunked 分块结束标志(0\\r\\n\\r\\n)。</p><p>报文头里最后 4 个字节是<strong>流标识符</strong>，也就是帧所属的流，接收方使用它就可以从乱序 的帧里识别出具有相同流 ID 的帧序列，按顺序组装起来就实现了虚拟的流。</p><p>流标识符虽然有 4 个字节，但最高位被保留不用，所以只有 31 位可以使用，也就是说，流标识符的上限是 2^31，大约是 21 亿。</p><img src="'+n+'" alt="image-20220921105158444" style="zoom:50%;"><p>在这个帧里，开头的三个字节是00010a，表示数据长度是 266 字节。</p><p>帧类型是 1，表示 HEADERS 帧，负载(payload)里面存放的是被 HPACK 算法压缩的头部信息。</p><p>标志位是 0x25，转换成二进制有 3 个位被置 1。PRIORITY 表示设置了流的优先级， END_HEADERS 表示这一个帧就是完整的头数据，END_STREAM 表示单方向数据发送结束，后续再不会有数据帧(即请求报文完毕，不会再有 DATA 帧 /Body 数据)。</p><p>最后 4 个字节的流标识符是整数 1，表示这是客户端发起的第一个流，后面的响应数据帧 也会是这个 ID，也就是说在 stream[1] 里完成这个请求响应。</p><h3 id="流与多路复用" tabindex="-1"><strong>流与多路复用</strong> <a class="header-anchor" href="#流与多路复用" aria-label="Permalink to &quot;**流与多路复用**&quot;">​</a></h3><p>弄清楚了帧结构后我们就来看 HTTP/2 的流与多路复用，它是 HTTP/2 最核心的部分。 --- (<strong>流是二进制帧的双向传输序列</strong>)。</p><p>要搞明白流，关键是要理解帧头里的流 ID。</p><p>在 HTTP/2 连接上，虽然帧是乱序收发的，但只要它们都拥有相同的流 ID，就都属于一个流，而且在这个流里帧不是无序的，而是有着严格的先后顺序。</p><p>比如在这次的 Wireshark 抓包里，就有0、1、3一共三个流，实际上就是分配了三个流 ID 号，把这些帧按编号分组，再排一下队，就成了流。</p><img src="'+T+'" alt="image-20220921105448367" style="zoom:50%;"><p>在概念上，一个 HTTP/2 的流就等同于一个 HTTP/1 里的请求 - 应答。在 HTTP/1 里 一个请求 - 响应报文来回是一次 HTTP 通信，在 HTTP/2 里一个流也承载了相同的功能。</p><p>你还可以对照着 TCP 来理解。TCP 运行在 IP 之上，其实从 MAC 层、IP 层的角度来看， TCP 的连接概念也是虚拟的。但从功能上看，无论是 HTTP/2 的流，还是 TCP 的连接，都是实际存在的，所以你以后大可不必再纠结于流的虚拟性，把它当做是一个真实存在的实体来理解就好。</p><p>HTTP/2 的流有哪些特点呢?简单列了一下:</p><ul><li>流是可并发的，一个 HTTP/2 连接上可以同时发出多个流传输数据，也就是并发多请求，实现多路复用</li><li>客户端和服务器都可以创建流，双方互不干扰</li><li>流是双向的，一个流里面客户端和服务器都可以发送或接收数据帧，也就是一个请求 - 应答来回</li><li>流之间没有固定关系，彼此独立，但流内部的帧是有严格顺序的</li><li>流可以设置优先级，让服务器优先处理，比如先传 HTML/CSS，后传图片，优化用户体验</li><li>流 ID 不能重用，只能顺序递增，客户端发起的 ID 是奇数，服务器端发起的 ID 是偶数</li><li>在流上发送RST_STREAM帧可以随时终止流，取消接收或发送</li><li>第 0 号流比较特殊，不能关闭，也不能发送数据帧，只能发送控制帧，用于流量控制</li></ul><p>从这些特性中，我们还可以推理出一些深层次的知识点。</p><p>比如说，HTTP/2 在一个连接上使用多个流收发数据，那么它本身默认就会是长连接，所以永远不需要Connection头字段(keepalive 或 close)。</p><h3 id="流状态转换" tabindex="-1"><strong>流状态转换</strong> <a class="header-anchor" href="#流状态转换" aria-label="Permalink to &quot;**流状态转换**&quot;">​</a></h3><p>流很重要，也很复杂。为了更好地描述运行机制，HTTP/2 借鉴了 TCP，根据帧的标志位实现流状态转换。当然，这些状态也是虚拟的，只是为了辅助理解。</p><p>HTTP/2 的流也有一个状态转换图，虽然比 TCP 要简单一点，但也不那么好懂，所以今天我只画了一个简化的图，对应到一个标准的 HTTP请求 - 应答。</p><img src="'+l+'" alt="image-20220921105923463" style="zoom:50%;"><p>最开始的时候流都是<strong>空闲</strong>(idle)状态，也就是不存在，可以理解成是待分配的号段资源。</p><p>当客户端发送 HEADERS 帧后，有了流 ID，流就进入了<strong>打开</strong>状态，两端都可以收发数据，然后客户端发送一个带END_STREAM标志位的帧，流就进入了<strong>半关闭</strong>状态。</p><p>这个半关闭状态很重要，意味着客户端的请求数据已经发送完了，需要接受响应数据，而服务器端也知道请求数据接收完毕，之后就要内部处理，再发送响应数据。</p><p>响应数据发完了之后，也要带上END_STREAM标志位，表示数据发送完毕，这样流两 端就都进入了<strong>关闭</strong>状态，流就结束了。</p><p>刚才也说过，流 ID 不能重用，所以流的生命周期就是 HTTP/1 里的一次完整的请求 - 应 答，流关闭就是一次通信结束。</p><p>下一次再发请求就要开一个新流(而不是新连接)，流 ID 不断增加，直到到达上限，发 送GOAWAY帧开一个新的 TCP 连接，流 ID 就又可以重头计数。</p><p>你再看看这张图，是不是和 HTTP/1 里的标准请求 - 应答过程很像，只不过这是发生 在虚拟的流上，而不是实际的 TCP 连接，又因为流可以并发，所以 HTTP/2 就可以实现无阻塞的多路复用。</p><h3 id="小结" tabindex="-1"><strong>小结</strong> <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;**小结**&quot;">​</a></h3><ul><li>HTTP/2 必须先发送一个连接前言字符串，然后才能建立正式连接</li><li>HTTP/2 废除了起始行，统一使用头字段，在两端维护字段Key-Value的索引表，使用HPACK算法压缩头部</li><li>HTTP/2 把报文切分为多种类型的二进制帧，报头里最重要的字段是流标识符，标记帧属于哪个流</li><li>流是 HTTP/2 虚拟的概念，是帧的双向传输序列，相当于 HTTP/1 里的一次请求 -应答</li><li>在一个 HTTP/2 连接上可以并发多个流，也就是多个请求 - 响应报文，这就是多路复用</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://time.geekbang.org/column/intro/100029001" target="_blank" rel="noreferrer">透视HTTP协议(罗剑锋)</a></p>',65),P=[g];function h(c,d,m,H,_,u){return e(),a("div",null,P)}const D=t(i,[["render",h]]);export{S as __pageData,D as default};
