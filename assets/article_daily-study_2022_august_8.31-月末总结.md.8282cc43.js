import{_ as s,c as a,o as n,a as l}from"./app.f9ecb9d2.js";const D=JSON.parse('{"title":"8.31-总结本月所学","description":"","frontmatter":{},"headers":[{"level":2,"title":"第一周","slug":"第一周","link":"#第一周","children":[]},{"level":2,"title":"第二周","slug":"第二周","link":"#第二周","children":[]},{"level":2,"title":"第三周","slug":"第三周","link":"#第三周","children":[]},{"level":2,"title":"第四周","slug":"第四周","link":"#第四周","children":[]},{"level":2,"title":"月最后3天","slug":"月最后3天","link":"#月最后3天","children":[]},{"level":2,"title":"下个月","slug":"下个月","link":"#下个月","children":[]}],"relativePath":"article/daily-study/2022/august/8.31-月末总结.md"}'),o={name:"article/daily-study/2022/august/8.31-月末总结.md"},p=l(`<h1 id="_8-31-总结本月所学" tabindex="-1">8.31-总结本月所学 <a class="header-anchor" href="#_8-31-总结本月所学" aria-hidden="true">#</a></h1><h2 id="第一周" tabindex="-1">第一周 <a class="header-anchor" href="#第一周" aria-hidden="true">#</a></h2><p>第一周的第一天我们写了<code>寄生组合继承</code>, 寄生组合继承是实现<code>es6 class</code>的核心,另外我们使用寄生组合继承解决了组合继承的问题</p><p>组合继承的一个问题(<code>调用了2 次父类构造函数</code>)</p><ul><li>第一次是在 new Student()中</li><li>第二次是在 Person.call() 中</li></ul><p>第二天我们手写了<code>Promise中的resolve方法</code>, 可以知道<code>resolve</code>返回的必然是个promise,因此可以接.then等方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>第三天我们手写了<code>Promise中的all方法</code>, 得知了<code>判断可迭代对象的方法</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> promises[Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator] </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是可迭代对象</span></span>
<span class="line"></span></code></pre></div><p>all方法会<code>等待所有都完成（或第一个失败）</code>, 才返回结果</p><p>第四天我们手写了<code>Promise中的allSettled方法</code>, 可以知道<code>Promise.allSettled</code>的实现跟<code>Promise.all</code>差不多,当有多个彼此不依赖的异步任务成功完成时，或者总是想知道每个<code>promise</code>的结果时，通常使用它</p><p>第五天我们手写了<code>Promise中的any方法</code>,可以知道<code>Promise.any</code>在本质上，这个方法和<code>Promise.all()</code>是相反的, 只要其中的一个 promise 成功，就返回那个已经成功的 promise, 或者等待全部失败, 返回一个失败的 promise 和AggregateError类型的实例</p><p>第六天我们手写了<code>Promise中的race方法</code>,可以知道, <code>Promise.race</code>, 无论成功还是失败, 返回最快的一个</p><p>第七天我们总结本周PromiseAPI的区别, 知道了Promise中各个API的区别</p><h2 id="第二周" tabindex="-1">第二周 <a class="header-anchor" href="#第二周" aria-hidden="true">#</a></h2><p>第二周我们实现了部分数组API的方法, 分别有<code>reduce</code>、<code>flat</code>、<code>map</code>、<code>includes</code>、<code>at</code></p><p>第一天, 通过<code>reduce</code>我们理解了<code>reduce</code>整体运行的一个过程</p><p>第二天, 通过<code>flat</code>我们学了<code>递归</code>去实现一个带<code>深度depth</code>的flat方法</p><p>第三天, 我们实现了<code>map</code>, 可以知道map返回的是一个新数组,并不会改变原数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(parseInt) </span><span style="color:#676E95;font-style:italic;">// [1, NaN, 3]</span></span>
<span class="line"></span></code></pre></div><p>为什么呢?</p><p>因为parseInt(string, radix_), 第一个参数是<code>要被解析的值</code>, 第二个参数是<code>进制数</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noreferrer">MDN对parseInt的描述</a></p><p>那么上述的代码就会变成</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">radix_</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(parseInt)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 变化</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">radix_</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">radix_</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)  </span><span style="color:#676E95;font-style:italic;">// [1, NaN, 3]</span></span>
<span class="line"></span></code></pre></div><p>第四天, 我们实现了<code>includes</code>,知道了<code>Object.is</code>可以判断NaN不想等的情况, NaN是一个非数字,具有<code>自反性(NaN !== NaN =&gt; true )并且(typeof NaN === &#39;number&#39;)</code></p><p>第五天, 我们实现了<code>at</code>, 知道了获取数组最后一位可以使用at方法, 不用在使用<code>arr[arr.length - 1]</code> 来获取了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">at</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"></span></code></pre></div><p>第七天, 我们总结了本周数组API</p><h2 id="第三周" tabindex="-1">第三周 <a class="header-anchor" href="#第三周" aria-hidden="true">#</a></h2><p>第三周我们实现了在工作上或者面试时, 比较常见的手写题</p><p>第一天, 我们手写了<code>交换a,b的值, 不使用临时变量</code>, 我们巧妙的利用了加减法去实现了在不使用临时变量的情况下进行了交换</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// 1 + 2 = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// 3 - 2 = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b </span><span style="color:#676E95;font-style:italic;">// 3 - 1 = 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 进行交换后</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre></div><p>另外, 我们在交换数组的元素的时候, 可以使用<code>解构</code>的方法去实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[arr[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr </span><span style="color:#676E95;font-style:italic;">// [3, 2, 1]</span></span>
<span class="line"></span></code></pre></div><p>第二天, 我们手写了<code>数组的乱序输出</code>, 我们也是利用了第一天的数组元素(<code>解构</code>)的去实现了交换, 在这一天, 我们学到了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 乱序</span></span>
<span class="line"></span></code></pre></div><p>使用<code>arr.sort</code>也可以实现乱序, 但是这种方法的乱序还不够乱, 因此由我们自身去实现这种乱序方法(<code>我们也叫做洗牌算法</code>)</p><p>并且, 在这一天, 我们知道了<code>v8 在实现 sort 方法时，当目标数组长度小于 10 时，使用插入排序；反之，使用快速排序和插入排序的混合排序</code></p><p>第三天, 我们手写了<code>实现对象扁平化</code>, 对象扁平化并不像数组扁平化这么容易, 实现对象扁平化同样需要递归, 在递归中, 我们需要知道,<code>递归的出口, 以及哪里需要递归</code></p><p>这是递归一个非常重要的一个点</p><p>第四天, 第五天, 我们实现了<code>JSON.stringify</code>, 通过理解他的九大特性,我们可以逐步的去实现它, 这是对自身基础的一个挑战, 需要把很多知识结合起来</p><p>第七天, 我们总结了本周的一个实现</p><h2 id="第四周" tabindex="-1">第四周 <a class="header-anchor" href="#第四周" aria-hidden="true">#</a></h2><p>第四周, 我们的着重点是<code>排序算法</code></p><p>第一天, 我们实现了<code>冒泡排序</code>, 冒泡排序的时间复杂度为O(n^2), 并且是一种<code>稳定</code>的排序算法</p><p>第二天, 我们实现了<code>选择排序</code>, 选择排序的时间复杂度为O(n^2), 并且是一种<code>不稳定</code>的排序算法</p><p>第三天, 我们实现了<code>快速排序</code>, 快速排序的时间复杂度在<code>nlogn~ n^2 之间</code>, 快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>第四天, 我们实现了<code>归并排序</code>, 归并排序时间复杂度在<code> nlog(n)</code>, <code>归并排序</code>的总体理解难度较难, 具体的代码需要自己用例子的数据去理解(并加以动图去理解)</p><p>第五天, 我们实现了<code>插入排序</code>, 插入排序时间复杂度在<code>n^2</code>, <code>插入排序</code>适合少量元素的排序的情况</p><p>第六天, 我们使用了<code>二分查找</code>来确定一个数在一个<code>有序数组</code>中的位置, 我们明白了使用二分查找的前提必须是一个<code>有序数组</code></p><p>第七天, 我们总结了本周的<code>排序算法</code></p><h2 id="月最后3天" tabindex="-1">月最后3天 <a class="header-anchor" href="#月最后3天" aria-hidden="true">#</a></h2><p>在8月的最后3天, 第一天我们去理解了<code>事件循环</code>, 我们知道<code>js是单线程</code>,因为js作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定js同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？所以，为了避免复杂性，因此<code>js是单线程</code>。</p><p>因为<code>js是单线程</code>, 所以js引入了<code>同步任务</code>和<code>异步任务</code>,异步任务还有更精确的区分</p><ul><li>微任务</li><li>宏任务</li></ul><p><strong>浏览器事件循环的一个大概</strong></p><ul><li>js是单线程语言，分为同步任务和异步任务, 同步任务同步执行，异步任务异步执行</li><li>在执行代码的过程中, 先去执行同步任务,等待同步任务完成后,然后会去执行异步任务</li><li>异步任务又分为宏微任务, 遇到宏任务,放入到宏任务队列里,遇到微任务,放入到微任务队列里</li><li>等待同步任务完成, 然后开始执行宏微任务,(<code>微任务优先于宏任务</code>),本次队列清空, 然后继续寻找宏任务,</li><li>以此反复直到清空所有宏任务，这种不断重复的执行机制，就叫做<code>事件循环</code></li></ul><p>第二天, 我们训练了大量的<code>Promise训练题</code>来去理解事件循环,来理解宏微任务</p><p>第三天, 我们总结了本月所学的知识, 看到这里, 继续为自己加油, 相信付出会有收获的, 可能短暂会看不到,但是未来你会发现那份属于你的知识已经存在于你心中</p><h2 id="下个月" tabindex="-1">下个月 <a class="header-anchor" href="#下个月" aria-hidden="true">#</a></h2><p>下一个月可能会偏向于http知识去学习</p>`,62),e=[p];function c(t,r,C,y,d,i){return n(),a("div",null,e)}const F=s(o,[["render",c]]);export{D as __pageData,F as default};
